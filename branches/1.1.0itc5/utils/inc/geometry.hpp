/*
 *                     SNS Common Libraries
 *           A part of the SNS Analysis Software Suite.
 *
 *                  Spallation Neutron Source
 *          Oak Ridge National Laboratory, Oak Ridge TN.
 *
 *
 *                             NOTICE
 *
 * For this software and its associated documentation, permission is granted
 * to reproduce, prepare derivative works, and distribute copies to the public
 * for any purpose and without fee.
 *
 * This material was prepared as an account of work sponsored by an agency of
 * the United States Government.  Neither the United States Government nor the
 * United States Department of Energy, nor any of their employees, makes any
 * warranty, express or implied, or assumes any legal liability or
 * responsibility for the accuracy, completeness, or usefulness of any
 * information, apparatus, product, or process disclosed, or represents that
 * its use would not infringe privately owned rights.
 *
 */

/**
 * $Id$
 *
 * \file utils/inc/geometry.hpp
 */
#ifndef _GEOMETRY_HPP
#define _GEOMETRY_HPP 1

#include "nessi.hpp"
#include <string>

/**
 * \namespace Utils
 *
 * \brief This sub-library contains various functions that do not
 * specifically reside in any of the other sub-libraries.
 *
 * All of these functions are written in reference to SNS
 * 107030214-TD0001-R00, "Data Reduction Library Software Requirements
 * and Specifications."
 */
namespace Utils
{
  /**
   * \defgroup calc_area_2D_polygon Utils::calc_area_2D_polygon
   * \{
   */
  
  /**
   * \brief This function is described in section 3.59
   *
   * This function takes two arrays of coordinates of a 2D polygon and 
   * calculates the area for that polygon. The coordinates of the polygon can 
   * be in any two-dimensional space. The area is calculated according to 
   * the function
   *
   * \f[
   * A = \frac{1}{2}\sum^{n}_{i=1} \left(x_i \left(y_{i-1} - 
   * y_{i+1}\right)\right)
   * \f]
   *
   * where \f$n\f$ is the size of the polygon, \f$x_i\f$ is the \f$i^{th}\f$ 
   * element in the x coordinate array, \f$y_{i-1}\f$ is the \f$i^{th}-1\f$ 
   * element in the y coordinate array and \f$y_{i+1}\f$ is the \f$i^{th}+1\f$ 
   * element in the y coordinate array. The value of \f$A\f$ is a signed area. 
   * In order to get \f$|A|\f$, the signed_area boolean flag should be set to 
   * false.
   * 
   * The implementation of this formula requires that the coordinate arrays 
   * must have the first ([0]) and second ([1]) elements repeated making the 
   * array sizes size_poly + 2. 
   *
   * \param x_coord (INPUT) the array of x coordinates for the polygon
   * \param y_coord (INPUT) the array of y coordinates for the polygon
   * \param size_poly (INPUT) the size of the polygon (i.e. square: 
   * size_poly=4)
   * \param signed_area (INPUT) flag to pass back the resulting area as a 
   * signed or unsigned quantity
   * \param area (OUTPUT) the area of the polygon
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   *
   * \exception std::invalid_argument is thrown if the size of x_coord is
   * not identical to the size of y_coord
   * \exception std::invalid_argument is thrown if the size of x_coord is
   * not identical to size_poly+2.
   */
  template <typename NumT>
  std::string
  calc_area_2D_polygon(const Nessi::Vector<NumT> & x_coord,
                       const Nessi::Vector<NumT> & y_coord,
                       const std::size_t size_poly,
                       const bool signed_area,
                       NumT & area,
                       void *temp=NULL);

  /**
   * \} // end of calc_area_2D_polygon
   */ 

} // Utils

#endif // _GEOMETRY_HPP
