/*
 *                     SNS Common Libraries
 *           A part of the SNS Analysis Software Suite.
 *
 *                  Spallation Neutron Source
 *          Oak Ridge National Laboratory, Oak Ridge TN.
 *
 *
 *                             NOTICE
 *
 * For this software and its associated documentation, permission is granted
 * to reproduce, prepare derivative works, and distribute copies to the public
 * for any purpose and without fee.
 *
 * This material was prepared as an account of work sponsored by an agency of
 * the United States Government.  Neither the United States Government nor the
 * United States Department of Energy, nor any of their employees, makes any
 * warranty, express or implied, or assumes any legal liability or
 * responsibility for the accuracy, completeness, or usefulness of any
 * information, apparatus, product, or process disclosed, or represents that
 * its use would not infringe privately owned rights.
 *
 */

/**
 * $Id$
 *
 * \file axis_manip/inc/conversions.hpp
 */
#ifndef _CONVERSIONS_HPP
#define _CONVERSIONS_HPP 1

#include "nessi.hpp"
#include <string>

/**
 * \namespace AxisManip
 *
 * \brief This sub-library contains the various physical axis
 * conversions that are useful for time-of-flight neutron scattering.
 *
 * Some conversions are identical to those used in monochromatic
 * neutron scattering. None of the functions in this name space will
 * reorder the resulting axes so they are monotonically increasing.
 *
 * All of these functions are written in reference to SNS
 * 107030214-TD0001-R00, "Data Reduction Library Software Requirements
 * and Specifications."
 */
namespace AxisManip
{
  /**
   * \defgroup d_spacing_to_tof_focused_det AxisManip::d_spacing_to_tof_focused_det
   * \{
   */

  /**
   * \brief This function is described in section  3.39.
   *
   * This function converts the d-spacing to time-of-flight at a
   * focused detector position according to the equation
   * \f[
   * TOF[i]=\frac{2\ m_n}{h} L_{focused} d[i] \sin(polar_{focused}/2)
   * \f]
   * Where \f$TOF[i]\f$ is the time-of-flight, \f$m_n\f$ is the mass
   * of the neutron, \f$h\f$ is Planck's constant, \f$L_{focused}\f$
   * is the focused total flight path, \f$d[i]\f$ is the d-spacing,
   * and \f$polar_{focused}\f$ is the angle between the z-axis and the
   * focused scattered neutron. The uncertainty is calculated using
   * the assumption of uncorrelated uncertainties.
   *
   * \f[
   * \sigma^2_{TOF}[i] = \left(\frac{m_n}{h}\right)^2 \times 
   * \left((2 d[i] \sin(polar_{focused}/2))^2 \sigma^2_{L_{focused}} + 
   * (2 L_{focused} \sin(polar_{focused}/2))^2 \sigma^2_d[i] + 
   * (L_{focused} d[i] \cos(polar_{focused}/2))^2 
   * \sigma^2_{polar_{focused}}\right)
   * \f]
   * 
   * \param d_spacing (INPUT) is the d-spacing axis in units of
   * Angstrom
   * \param d_spacing_err2 (INPUT) is the square of the uncertainty in
   * the d-spacing axis
   * \param pathlength_focused (INPUT) is the total flight path of the
   * focused neutron in units of meter
   * \param pathlength_focused_err2 (INPUT) is the square of the
   * uncertainty in pathlength_focused
   * \param polar_focused (INPUT) is the polar angle of the focused
   * neutron in the equation above in units of radians
   * \param polar_focused_err2 (INPUT) is the square of the
   * uncertainty in polar_focused
   * \param tof (OUTPUT) is the time-of-flight axis in units of
   * micro-seconds
   * \param tof_err2 (OUTPUT) is the square of the uncertainty in the
   * time-of-flight axis
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   */
  template <typename NumT>
  std::string
  d_spacing_to_tof_focused_det(const Nessi::Vector<NumT> & d_spacing,
                               const Nessi::Vector<NumT> & d_spacing_err2,
                               const NumT pathlength_focused,
                               const NumT pathlength_focused_err2,
                               const NumT polar_focused,
                               const NumT polar_focused_err2,
                               Nessi::Vector<NumT> & tof,
                               Nessi::Vector<NumT> & tof_err2,
                               void *temp=NULL);

  /**
   * \brief This function is described in section  3.39.
   *
   * This function converts the d-spacing to time-of-flight at a
   * focused detector position according to the equation
   * \f[
   * TOF=\frac{2\ m_n}{h} L_{focused} d \sin(polar_{focused}/2)
   * \f]
   * Where \f$TOF\f$ is the time-of-flight, \f$m_n\f$ is the mass of
   * the neutron, \f$h\f$ is Planck's constant, \f$L_{focused}\f$ is
   * the focused total flight path, \f$d\f$ is the d-spacing, and
   * \f$polar_{focused}\f$ is the angle between the z-axis and the
   * focused scattered neutron. The uncertainty is calculated using
   * the assumption of uncorrelated uncertainties.
   *
   * \f[
   * \sigma^2_{TOF} = \left(\frac{m_n}{h}\right)^2 \times 
   * \left((2 d \sin(polar_{focused}/2))^2 \sigma^2_{L_{focused}} + 
   * (2 L_{focused} \sin(polar_{focused}/2))^2 \sigma^2_d + 
   * (L_{focused} d \cos(polar_{focused}/2))^2 \sigma^2_{polar_{focused}}
   * \right)
   * \f]
   * 
   * \param d_spacing (INPUT) is the d-spacing axis in units of
   * Angstrom
   * \param d_spacing_err2 (INPUT) is the square of the uncertainty in
   * the d-spacing axis
   * \param pathlength_focused (INPUT) is the total flight path of the
   * focused neutron in units of meter
   * \param pathlength_focused_err2 (INPUT) is the square of the
   * uncertainty in pathlength_focused
   * \param polar_focused (INPUT) is the polar angle of the focused
   * neutron in the equation above in units of radians
   * \param polar_focused_err2 (INPUT) is the square of the
   * uncertainty in polar_focused
   * \param tof (OUTPUT) is the time-of-flight axis in units of
   * micro-seconds
   * \param tof_err2 (OUTPUT) is the square of the uncertainty in the
   * time-of-flight axis
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   */
  template <typename NumT>
  std::string
  d_spacing_to_tof_focused_det(const NumT d_spacing,
                               const NumT d_spacing_err2,
                               const NumT pathlength_focused,
                               const NumT pathlength_focused_err2,
                               const NumT polar_focused,
                               const NumT polar_focused_err2,
                               NumT & tof,
                               NumT & tof_err2,
                               void *temp=NULL);
  /**
   * \}
   */ // end of d_spacing_to_tof_focused_det group


  /**
   * \defgroup energy_transfer AxisManip::energy_transfer
   * \{
   */

  /**
   * \brief This function is described in section 3.30.
   *
   * This function calculates the energy transfer according to the
   * equation
   * \f[
   * \nu[i]=\frac{E_i[i]-E_f[i]}{h}=\frac{E_i[i]-E_f[i]}{4.1357}\frac{THz}{meV}
   * \f]
   * Where \f$\nu\f$ is the energy transfer, \f$E_i\f$ is the incident
   * energy, and \f$E_f\f$ is the final energy.
   *
   * Using the assumption of uncorrelated uncertainties, the square of
   * the uncertainty of the energy transfer is given by
   *
   * \f[
   * \sigma^2_\nu [i]=\frac{\sigma^2_{E_i}[i] +\sigma^2_{E_f}[i]}{h^2}
   * \f]
   * Where \f$\sigma_{E_i} \f$ is the uncertainty of the incident
   * energy axis, and \f$\sigma_{E_f} \f$ is the uncertainty of the
   * final energy axis.
   *
   * \param initial_energy (INPUT) is the incident energy axis in
   * units of meV
   * \param initial_energy_err2 (INPUT) is the square of the
   * uncertainty of the incident energy axis
   * \param final_energy (INPUT) is the final energy axis in units of
   * meV
   * \param final_energy_err2 (INPUT) is the square of the uncertainty
   * of the final energy axis
   * \param energy_transfer (OUTPUT) is the energy transfer axis in
   * units of THz
   * \param energy_transfer_err2 (OUTPUT) is the square of the
   * uncertainty in the energy transfer axis
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   *
   * \exception std::invalid_argument is thrown if initial_energy,
   * initial_energy_err2, final_energy, final_energy_err2,
   * energy_transfer, and energy_transfer_err2 are not identical.
   */
  template <typename NumT>
  std::string
  energy_transfer(const Nessi::Vector<NumT> & initial_energy,
                  const Nessi::Vector<NumT> & initial_energy_err2,
                  const Nessi::Vector<NumT> & final_energy,
                  const Nessi::Vector<NumT> & final_energy_err2,
                  Nessi::Vector<NumT> & energy_transfer,
                  Nessi::Vector<NumT> & energy_transfer_err2,
                  void *temp=NULL);

  /**
   * \brief This function is described in section 3.30.
   *
   * This function calculates the energy transfer according to the
   * equation
   * \f[
   * \nu[i]=\frac{E_i[i]-E_f}{h}=\frac{E_i[i]-E_f}{4.1357}\frac{THz}{meV}
   * \f]
   * Where \f$\nu\f$ is the energy transfer, \f$E_i\f$ is the incident
   * energy, and \f$E_f\f$ is the final energy.
   *
   * Using the assumption of uncorrelated uncertainties, the square of
   * the uncertainty of the energy transfer is given by
   *
   * \f[
   * \sigma^2_\nu [i]=\frac{\sigma^2_{E_i}[i] +\sigma^2_{E_f}}{h^2}
   * \f]
   * Where \f$\sigma_{E_i} \f$ is the uncertainty of the incident
   * energy axis, and \f$\sigma_{E_f} \f$ is the uncertainty of the
   * final energy axis.
   *
   * \param initial_energy (INPUT) is the incident energy axis in
   * units of meV
   * \param initial_energy_err2 (INPUT) is the square of the
   * uncertainty of the incident energy axis
   * \param final_energy (INPUT) is the final energy axis in units of
   * meV
   * \param final_energy_err2 (INPUT) is the square of the uncertainty
   * of the final energy axis
   * \param energy_transfer (OUTPUT) is the energy transfer axis in
   * units of THz
   * \param energy_transfer_err2 (OUTPUT) is the square of the
   * uncertainty in the energy transfer axis
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   *
   * \exception std::invalid_argument is thrown if initial_energy,
   * initial_energy_err2, energy_transfer, and energy_transfer_err2
   * are not identical.
   */
  template <typename NumT>
  std::string
  energy_transfer(const Nessi::Vector<NumT> & initial_energy,
                  const Nessi::Vector<NumT> & initial_energy_err2,
                  const NumT final_energy,
                  const NumT final_energy_err2,
                  Nessi::Vector<NumT> & energy_transfer,
                  Nessi::Vector<NumT> & energy_transfer_err2,
                  void *temp=NULL);

  /**
   * \brief This function is described in section 3.30.
   *
   * This function calculates the energy transfer according to the
   * equation
   * \f[
   * \nu[i]=\frac{E_i-E_f[i]}{h}=\frac{E_i-E_f[i]}{4.1357}\frac{THz}{meV}
   * \f]
   * Where \f$\nu\f$ is the energy transfer, \f$E_i\f$ is the incident
   * energy, and \f$E_f\f$ is the final energy.
   *
   * Using the assumption of uncorrelated uncertainties, the square of
   * the uncertainty of the energy transfer is given by
   *
   * \f[
   * \sigma^2_\nu [i]=\frac{\sigma^2_{E_i} +\sigma^2_{E_f}[i]}{h^2}
   * \f]
   * Where \f$\sigma_{E_i} \f$ is the uncertainty of the incident
   * energy axis, and \f$\sigma_{E_f} \f$ is the uncertainty of the
   * final energy axis.
   *
   * \param initial_energy (INPUT) is the incident energy axis in
   * units of meV
   * \param initial_energy_err2 (INPUT) is the square of the
   * uncertainty of the incident energy axis
   * \param final_energy (INPUT) is the final energy axis in units of
   * meV
   * \param final_energy_err2 (INPUT) is the square of the uncertainty
   * of the final energy axis
   * \param energy_transfer (OUTPUT) is the energy transfer axis in
   * units of THz
   * \param energy_transfer_err2 (OUTPUT) is the square of the
   * uncertainty in the energy transfer axis
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   *
   * \exception std::invalid_argument is thrown if final_energy,
   * final_energy_err2, energy_transfer, and energy_transfer_err2 are
   * not identical.
   */
  template <typename NumT>
  std::string
  energy_transfer(const NumT initial_energy,
                  const NumT initial_energy_err2,
                  const Nessi::Vector<NumT> & final_energy,
                  const Nessi::Vector<NumT> & final_energy_err2,
                  Nessi::Vector<NumT> & energy_transfer,
                  Nessi::Vector<NumT> & energy_transfer_err2,
                  void *temp=NULL);

  /**
   * \brief This function is described in section 3.30.
   *
   * This function calculates the energy transfer according to the
   * equation
   * \f[
   * \nu=\frac{E_i-E_f}{h}=\frac{E_i-E_f}{4.1357}\frac{THz}{meV}
   * \f]
   * Where \f$\nu\f$ is the energy transfer, \f$E_i\f$ is the incident
   * energy, and \f$E_f\f$ is the final energy.
   *
   * Using the assumption of uncorrelated uncertainties, the square of
   * the uncertainty of the energy transfer is given by
   *
   * \f[
   * \sigma^2_\nu=\frac{\sigma^2_{E_i} +\sigma^2_{E_f}}{h^2}
   * \f]
   * Where \f$\sigma_{E_i} \f$ is the uncertainty of the incident
   * energy axis, and \f$\sigma_{E_f} \f$ is the uncertainty of the
   * final energy axis.
   *
   * \param initial_energy (INPUT) is the incident energy axis in
   * units of meV
   * \param initial_energy_err2 (INPUT) is the square of the
   * uncertainty of the incident energy axis
   * \param final_energy (INPUT) is the final energy axis in units of
   * meV
   * \param final_energy_err2 (INPUT) is the square of the uncertainty
   * of the final energy axis
   * \param energy_transfer (OUTPUT) is the energy transfer axis in
   * units of THz
   * \param energy_transfer_err2 (OUTPUT) is the square of the
   * uncertainty in the energy transfer axis
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   */
  template <typename NumT>
  std::string
  energy_transfer(const NumT initial_energy,
                  const NumT initial_energy_err2,
                  const NumT final_energy,
                  const NumT final_energy_err2,
                  NumT & energy_transfer,
                  NumT & energy_transfer_err2,
                  void *temp=NULL);

  /**
   * \}
   */ // end of energy_transfer group

  /**
   * \defgroup final_velocity_igs AxisManip::final_velocity_igs
   * \{
   */

  /**
   * \brief This function is described in section 3.20.
   *
   * This function calculates the final velocity of the neutron for an
   * inverse geometry spectrometer according to the equation.
   * \f[
   * v=\frac{h}{m_n \lambda_f}
   * \f]
   * Where \f$v\f$ is the final velocity of the neutron, \f$h\f$ is
   * Planck's constant, \f$m_n\f$ is the mass of the neutron, and
   * \f$\lambda_f\f$ is the wavelength reflected by the analyzer
   * crystal. The uncertainty is calculated using the assumption of
   * uncorrelated uncertainties.
   *
   * \param analyzer_wavelength (INPUT) is the wavelength reflected by
   * the analyzer crystal in units of Angstroms
   * \param analyzer_wavelength_err2 (INPUT) is the square of the
   * uncertainty in analyzer_wavelength
   * \param final_velocity (OUTPUT) is the final velocity of the
   * neutron in units of meter/micro-seconds
   * \param final_velocity_err2 (OUTPUT) is the square of the
   * uncertainty in final_velocity
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   */
  template <typename NumT>
  std::string
  final_velocity_igs(const NumT analyzer_wavelength,
                     const NumT analyzer_wavelength_err2,
                     NumT & final_velocity,
                     NumT & final_velocity_err2,
                     void *temp=NULL);

  /**
   * \}
   */ // end of final_velocity_igs group

  /**
   * \defgroup frequency_to_angular_frequency AxisManip::frequency_to_angular_frequency
   * \{
   */

  /**
   * \brief This function is described in section 3.31.
   *
   * This function calculates the angular frequency according to the
   * equation
   * \f[
   * \omega[i]=2\pi\nu[i] \times 10^{12}
   * \f]
   * Where \f$\omega[i]\f$ is the angular frequency, and \f$\nu[i]\f$
   * is the frequency. The uncertainty is calculated using the
   * assumption of uncorrelated uncertainties.
   *
   * \f[
   * \sigma^2_{\omega}[i] = 4 \pi^2 \times 10^{24} \sigma^2_{\nu}[i]
   * \f]
   *
   * \param frequency (INPUT) is the frequency axis in units of THz
   * \param frequency_err2 (INPUT) is the square of the uncertainty in
   * the frequency axis
   * \param angular_frequency (OUTPUT) is the angular frequency axis
   * in units of rad/second
   * \param angular_frequency_err2 (OUTPUT) is the square of the
   * uncertainty in the angular frequency axis
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   */
  template <typename NumT>
  std::string
  frequency_to_angular_frequency(const Nessi::Vector<NumT> & frequency,
                                 const Nessi::Vector<NumT> & frequency_err2,
                                 Nessi::Vector<NumT> & angular_frequency,
                                 Nessi::Vector<NumT> & angular_frequency_err2,
                                 void *temp=NULL);

  /**
   * \brief This function is described in section 3.31.
   *
   * This function calculates the angular frequency according to the
   * equation
   * \f[
   * \omega=2\pi\nu \times 10^{12}
   * \f]
   * Where \f$\omega\f$ is the angular frequency, and \f$\nu\f$
   * is the frequency. The uncertainty is calculated using the
   * assumption of uncorrelated uncertainties.
   *
   * \f[
   * \sigma^2_{\omega} = 4 \pi^2 \times 10^{24} \sigma^2_{\nu}
   * \f]
   *
   * \param frequency (INPUT) is the frequency axis in units of THz
   * \param frequency_err2 (INPUT) is the square of the uncertainty in
   * the frequency axis
   * \param angular_frequency (OUTPUT) is the angular frequency axis
   * in units of rad/second
   * \param angular_frequency_err2 (OUTPUT) is the square of the
   * uncertainty in the angular frequency axis
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   */
  template <typename NumT>
  std::string
  frequency_to_angular_frequency(const NumT frequency,
                                 const NumT frequency_err2,
                                 NumT & angular_frequency,
                                 NumT & angular_frequency_err2,
                                 void *temp=NULL);

  /**
   * \}
   */ // end of frequency_to_angular_frequency group

  /**
   * \defgroup frequency_to_energy AxisManip::frequency_to_energy
   * \{
   */

  /**
   * \brief This function is described in section 3.47
   *
   * This function takes a histogram data set that has the principle axis
   * in units of THz and converts it to meV according to the equation
   * \f[
   * E[i]=h\nu[i]
   * \f]
   * where \f$E\f$ is the energy in units of meV, \f$\nu\f$ is the frequency
   * in units
   * of THz, and \f$h\f$ is Planck's constant.
   * Assuming that the uncertainties are uncorrelated, the square of the
   * uncertainty of the energy axis is given by
   * \f[
   * \sigma^2_E[i]=h^2\sigma^2_{\nu}[i]
   * \f]
   *
   * \param frequency (INPUT) is the frequency axis in unit of THz
   * \param frequency_err2 (INPUT) is the square of the uncertainty of the
   *        frequency axis
   * \param E (OUTPUT) is the energy axis in units of meV
   * \param E_err2 (OUTPUT) is the square of the uncertainty of the energy axis
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   */
  template <typename NumT>
  std::string
  frequency_to_energy(Nessi::Vector<NumT> const & frequency,
                      Nessi::Vector<NumT> const & frequency_err2,
                      Nessi::Vector<NumT> & E,
                      Nessi::Vector<NumT> & E_err2,
                      void *temp=NULL);

  /**
   * \brief This function is described in section 3.47
   *
   * This function takes a histogram data set that has the principle axis
   * in units of THz and converts it to meV according to the equation
   * \f[
   * E=h\nu
   * \f]
   * where \f$E\f$ is the energy in units of meV, \f$\nu\f$ is the frequency
   * in units
   * of THz, and \f$h\f$ is Planck's constant.
   * Assuming that the uncertainties are uncorrelated, the square of the
   * uncertainty of the energy axis is given by
   * \f[
   * \sigma^2_E =h^2\sigma^2_{\nu}
   * \f]
   *
   * \param frequency (INPUT) is the frequency axis in unit of THz
   * \param frequency_err2 (INPUT) is the square of the uncertainty of the
   *        frequency axis
   * \param E (OUTPUT) is the energy axis in units of meV
   * \param E_err2 (OUTPUT) is the square of the uncertainty of the energy axis
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   */
  template <typename NumT>
  std::string
  frequency_to_energy(const NumT frequency,
                      const NumT frequency_err2,
                      NumT & E,
                      NumT & E_err2,
                      void *temp=NULL);
  /**
   * \}
   */ // end of frequency_to_energy

  /**
   * \defgroup initial_velocity_dgs AxisManip::initial_velocity_dgs
   * \{
   */

  /**
   * \brief This function is described in section 3.19.
   *
   * This function calculates the initial velocity of the neutron for
   * a direct geometry spectrometer according to the equation
   * \f[
   * v=\frac{L_d-L_u}{t_d-t_u}
   * \f]
   * Where \f$v\f$ is the initial velocity, \f$L_d\f$ is the distance
   * to the downstream monitor, \f$L_u\f$ is the distance to the
   * upstream monitor, \f$t_d\f$ is the time-of-flight to reach the
   * downstream monitor, and \f$t_u\f$ is the time-of-flight to reach
   * the upstream monitor. The uncertainty is calculated using the
   * assumption of uncorrelated uncertainties.
   * \f[
   * \sigma^2_v = \frac{\sigma^2_{dist\_downstream\_mon} +
   *              \sigma^2_{dist\_upstream\_mon}}{(t_d - t_u)^2}
   * \f]
   *
   * \param dist_upstream_mon (INPUT) is the distance to the upstream
   * monitor in units of meters
   * \param dist_upstream_mon_err2 (INPUT) is the square of the
   * uncertainty in dist_upstream_mon
   * \param time_upstream_mon (INPUT) is the time-of-flight to reach
   * the upstream monitor in units of micro-seconds
   * \param time_upstream_mon_err2 (INPUT) is the square of the
   * uncertainty in time_upstream_mon
   * \param dist_downstream_mon (INPUT) is the distance to the
   * downstream monitor in units of meters
   * \param dist_downstream_mon_err2 (INPUT) is the square of the
   * uncertainty in dist_downstream_mon
   * \param time_downstream_mon (INPUT) is the time-of-flight to reach
   * the downstream monitor in units of micro-seconds
   * \param time_downstream_mon_err2 (INPUT) is the square of the
   * uncertainty in time_downstream_mon
   * \param initial_velocity (OUTPUT) is the initial velocity of the
   * neutron in units of meter/mirco-seconds
   * \param initial_velocity_err2 (OUTPUT) is the square of the
   * uncertainty in initial_velocity
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   */
  template <typename NumT>
  std::string
  initial_velocity_dgs(const NumT dist_upstream_mon,
                       const NumT dist_upstream_mon_err2,
                       const NumT time_upstream_mon,
                       const NumT time_upstream_mon_err2,
                       const NumT dist_downstream_mon,
                       const NumT dist_downstream_mon_err2,
                       const NumT time_downstream_mon,
                       const NumT time_downstream_mon_err2,
                       NumT & initial_velocity,
                       NumT & initial_velocity_err2,
                       void *temp=NULL);

  /**
   * \}
   */ // end of initial_velocity_dgs group

  /**
   * \defgroup init_scatt_wavevector_to_Q AxisManip::init_scatt_wavevector_to_Q
   * \{
   */

  /**
   * \brief This function is described in section 3.32.
   *
   * This function calculates the momentum transfrom from the incident
   * and scattered wavevectors according to the equations
   * \f[
   * Q_x[i]=-k_f[i]\cos(azimuthal)\sin(polar)
   * \f]
   * \f[
   * Q_y[i]=-k_f[i]\sin(azimuthal)\sin(polar)
   * \f]
   * \f[
   * Q_z[i]=k_i[i]-k_f[i]\cos(polar)
   * \f]
   * Where \f$k_i\f$ is the incident wavevector, \f$k_f\f$ is the
   * scattered wavevector, \f$Q_x\f$ is the x-component of the
   * momentum transfer, \f$Q_y\f$ is the y-component of the momentum
   * transfer, \f$Q_z\f$ is the z-component of the momentum transfer,
   * \f$azimuthal\f$ is the angle between the x-axis and the scattered
   * neturon, and \f$polar\f$ is the angle between the z-axis and the
   * scattered neutron. The uncertainty is calculated using the
   * assumption of uncorrelated uncertainties.
   *
   * \f[
   * \sigma^2_{Q_x}[i] = (\cos(azimuthal) \sin(polar))^2 \sigma^2_{k_f}[i] + 
   * k^2_f[i] \times ((\sin(azimuthal) \sin(polar))^2 \sigma^2_{azimuthal} + 
   * (\cos(azimuthal) \cos(polar))^2 \sigma^2_{polar})
   * \f]
   * \f[
   * \sigma^2_{Q_y}[i] = (\sin(azimuthal) \sin(polar))^2 \sigma^2_{k_f}[i] + 
   * k^2_f[i] \times ((\cos(azimuthal) \sin(polar))^2 \sigma^2_{azimuthal} + 
   * (\sin(azimuthal) \cos(polar))^2 \sigma^2_{polar})
   * \f]
   * \f[
   * \sigma^2_{Q_z}[i] = \sigma^2_{k_i}[i] + \cos^2(polar)\sigma^2_{k_f}[i] + 
   * k^2_f[i] \sin^2(polar) \sigma^2_{polar}
   * \f]
   *
   * \param initial_wavevector (INPUT) is the incident wavevector axis
   * in units of reciprocal Angstroms
   * \param initial_wavevector_err2 (INPUT) is the square of the
   * uncertainty of the incident wavevector axis
   * \param final_wavevector (INPUT) is the final wavevector axis in
   * units of reciprocal Angstroms
   * \param final_wavevector_err2 (INPUT) is the square of the
   * uncertainty of the final wavevector axis
   * \param azimuthal (INPUT) is the azimuthal angle in the equation
   * above in units of radians
   * \param azimuthal_err2 (INPUT) is the square of the uncertainty in
   * azumuthal
   * \param polar (INPUT) is the polar angle in the equation above in
   * units of radians
   * \param polar_err2 (INPUT) is the square of the uncertainty in
   * polar
   * \param Qx (OUTPUT) is the x-component of the momentum transfer,
   * \f$Q_x\f$, axis in units of reciprocal angstroms
   * \param Qx_err2 (OUTPUT) is the square of the uncertainty in the
   * x-component of the momentum transfer axis
   * \param Qy (OUTPUT) is the y-component of the momentum transfer,
   * \f$Q_y\f$, axis in units of reciprocal angstroms
   * \param Qy_err2 (OUTPUT) is the square of the uncertainty in the
   * y-component of the momentum transfer axis
   * \param Qz (OUTPUT) is the y-component of the momentum transfer,
   * \f$Q_y\f$, axis in units of reciprocal angstroms
   * \param Qz_err2 (OUTPUT) is the square of the uncertainty in the
   * y-component of the momentum transfer axis
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   */
  template <typename NumT>
  std::string
  init_scatt_wavevector_to_Q(
                           const Nessi::Vector<NumT> & initial_wavevector,
                           const Nessi::Vector<NumT> & initial_wavevector_err2,
                           const Nessi::Vector<NumT> & final_wavevector,
                           const Nessi::Vector<NumT> & final_wavevector_err2,
                           const NumT azimuthal,
                           const NumT azimuthal_err2,
                           const NumT polar,
                           const NumT polar_err2,
                           Nessi::Vector<NumT> & Qx,
                           Nessi::Vector<NumT> & Qx_err2,
                           Nessi::Vector<NumT> & Qy,
                           Nessi::Vector<NumT> & Qy_err2,
                           Nessi::Vector<NumT> & Qz,
                           Nessi::Vector<NumT> & Qz_err2,
                           void *temp=NULL);

  /**
   * \brief This function is described in section 3.32.
   *
   * This function calculates the momentum transfrom from the incident
   * and scattered wavevectors according to the equations
   * \f[
   * Q_x[i]=-k_f[i]\cos(azimuthal)\sin(polar)
   * \f]
   * \f[
   * Q_y[i]=-k_f[i]\sin(azimuthal)\sin(polar)
   * \f]
   * \f[
   * Q_z[i]=k_i-k_f[i]\cos(polar)
   * \f]
   * Where \f$k_i\f$ is the incident wavevector, \f$k_f\f$ is the
   * scattered wavevector, \f$Q_x\f$ is the x-component of the
   * momentum transfer, \f$Q_y\f$ is the y-component of the momentum
   * transfer, \f$Q_z\f$ is the z-component of the momentum transfer,
   * \f$azimuthal\f$ is the angle between the x-axis and the scattered
   * neturon, and \f$polar\f$ is the angle between the z-axis and the
   * scattered neutron. The uncertainty is calculated using the
   * assumption of uncorrelated uncertainties.
   *
   * \f[
   * \sigma^2_{Q_x}[i] = (\cos(azimuthal) \sin(polar))^2 \sigma^2_{k_f}[i] + 
   * k^2_f[i] \times ((\sin(azimuthal) \sin(polar))^2 \sigma^2_{azimuthal} + 
   * (\cos(azimuthal) \cos(polar))^2 \sigma^2_{polar})
   * \f]
   * \f[
   * \sigma^2_{Q_y}[i] = (\sin(azimuthal) \sin(polar))^2 \sigma^2_{k_f}[i] + 
   * k^2_f[i] \times ((\cos(azimuthal) \sin(polar))^2 \sigma^2_{azimuthal} + 
   * (\sin(azimuthal) \cos(polar))^2 \sigma^2_{polar})
   * \f]
   * \f[
   * \sigma^2_{Q_z}[i] = \sigma^2_{k_i} + \cos^2(polar)\sigma^2_{k_f}[i] + 
   * k^2_f[i] \sin^2(polar) \sigma^2_{polar}
   * \f]
   *
   * \param initial_wavevector (INPUT) is the incident wavevector axis
   * in units of reciprocal Angstroms
   * \param initial_wavevector_err2 (INPUT) is the square of the
   * uncertainty of the incident wavevector axis
   * \param final_wavevector (INPUT) is the final wavevector axis in
   * units of reciprocal Angstroms
   * \param final_wavevector_err2 (INPUT) is the square of the
   * uncertainty of the final wavevector axis
   * \param azimuthal (INPUT) is the azimuthal angle in the equation
   * above in units of radians
   * \param azimuthal_err2 (INPUT) is the square of the uncertainty in
   * azumuthal
   * \param polar (INPUT) is the polar angle in the equation above in
   * units of radians
   * \param polar_err2 (INPUT) is the square of the uncertainty in
   * polar
   * \param Qx (OUTPUT) is the x-component of the momentum transfer,
   * \f$Q_x\f$, axis in units of reciprocal angstroms
   * \param Qx_err2 (OUTPUT) is the square of the uncertainty in the
   * x-component of the momentum transfer axis
   * \param Qy (OUTPUT) is the y-component of the momentum transfer,
   * \f$Q_y\f$, axis in units of reciprocal angstroms
   * \param Qy_err2 (OUTPUT) is the square of the uncertainty in the
   * y-component of the momentum transfer axis
   * \param Qz (OUTPUT) is the y-component of the momentum transfer,
   * \f$Q_y\f$, axis in units of reciprocal angstroms
   * \param Qz_err2 (OUTPUT) is the square of the uncertainty in the
   * y-component of the momentum transfer axis
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   */
  template <typename NumT>
  std::string
  init_scatt_wavevector_to_Q(
                           const NumT initial_wavevector,
                           const NumT initial_wavevector_err2,
                           const Nessi::Vector<NumT> & final_wavevector,
                           const Nessi::Vector<NumT> & final_wavevector_err2,
                           const NumT azimuthal,
                           const NumT azimuthal_err2,
                           const NumT polar,
                           const NumT polar_err2,
                           Nessi::Vector<NumT> & Qx,
                           Nessi::Vector<NumT> & Qx_err2,
                           Nessi::Vector<NumT> & Qy,
                           Nessi::Vector<NumT> & Qy_err2,
                           Nessi::Vector<NumT> & Qz,
                           Nessi::Vector<NumT> & Qz_err2,
                           void *temp=NULL);

  /**
   * \brief This function is described in section 3.32.
   *
   * This function calculates the momentum transfrom from the incident
   * and scattered wavevectors according to the equations
   * \f[
   * Q_x=-k_f\cos(azimuthal)\sin(polar)
   * \f]
   * \f[
   * Q_y=-k_f\sin(azimuthal)\sin(polar)
   * \f]
   * \f[
   * Q_z[i]=k_i[i]-k_f\cos(polar)
   * \f]
   * Where \f$k_i\f$ is the incident wavevector, \f$k_f\f$ is the
   * scattered wavevector, \f$Q_x\f$ is the x-component of the
   * momentum transfer, \f$Q_y\f$ is the y-component of the momentum
   * transfer, \f$Q_z\f$ is the z-component of the momentum transfer,
   * \f$azimuthal\f$ is the angle between the x-axis and the scattered
   * neturon, and \f$polar\f$ is the angle between the z-axis and the
   * scattered neutron. The uncertainty is calculated using the
   * assumption of uncorrelated uncertainties.
   *
   * \f[
   * \sigma^2_{Q_x}[i] = (\cos(azimuthal) \sin(polar))^2 \sigma^2_{k_f} + 
   * k^2_f \times ((\sin(azimuthal) \sin(polar))^2 \sigma^2_{azimuthal} + 
   * (\cos(azimuthal) \cos(polar))^2 \sigma^2_{polar})
   * \f]
   * \f[
   * \sigma^2_{Q_y}[i] = (\sin(azimuthal) \sin(polar))^2 \sigma^2_{k_f} + 
   * k^2_f \times ((\cos(azimuthal) \sin(polar))^2 \sigma^2_{azimuthal} + 
   * (\sin(azimuthal) \cos(polar))^2 \sigma^2_{polar})
   * \f]
   * \f[
   * \sigma^2_{Q_z}[i] = \sigma^2_{k_i}[i] + \cos^2(polar)\sigma^2_{k_f} + 
   * k^2_f \sin^2(polar) \sigma^2_{polar}
   * \f]
   *
   * \param initial_wavevector (INPUT) is the incident wavevector axis
   * in units of reciprocal Angstroms
   * \param initial_wavevector_err2 (INPUT) is the square of the
   * uncertainty of the incident wavevector axis
   * \param final_wavevector (INPUT) is the final wavevector axis in
   * units of reciprocal Angstroms
   * \param final_wavevector_err2 (INPUT) is the square of the
   * uncertainty of the final wavevector axis
   * \param azimuthal (INPUT) is the azimuthal angle in the equation
   * above in units of radians
   * \param azimuthal_err2 (INPUT) is the square of the uncertainty in
   * azumuthal
   * \param polar (INPUT) is the polar angle in the equation above in
   * units of radians
   * \param polar_err2 (INPUT) is the square of the uncertainty in
   * polar
   * \param Qx (OUTPUT) is the x-component of the momentum transfer,
   * \f$Q_x\f$, axis in units of reciprocal angstroms
   * \param Qx_err2 (OUTPUT) is the square of the uncertainty in the
   * x-component of the momentum transfer axis
   * \param Qy (OUTPUT) is the y-component of the momentum transfer,
   * \f$Q_y\f$, axis in units of reciprocal angstroms
   * \param Qy_err2 (OUTPUT) is the square of the uncertainty in the
   * y-component of the momentum transfer axis
   * \param Qz (OUTPUT) is the y-component of the momentum transfer,
   * \f$Q_y\f$, axis in units of reciprocal angstroms
   * \param Qz_err2 (OUTPUT) is the square of the uncertainty in the
   * y-component of the momentum transfer axis
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   */
  template <typename NumT>
  std::string
  init_scatt_wavevector_to_Q(
                           const Nessi::Vector<NumT> & initial_wavevector,
                           const Nessi::Vector<NumT> & initial_wavevector_err2,
                           const NumT final_wavevector,
                           const NumT final_wavevector_err2,
                           const NumT azimuthal,
                           const NumT azimuthal_err2,
                           const NumT polar,
                           const NumT polar_err2,
                           Nessi::Vector<NumT> & Qx,
                           Nessi::Vector<NumT> & Qx_err2,
                           Nessi::Vector<NumT> & Qy,
                           Nessi::Vector<NumT> & Qy_err2,
                           Nessi::Vector<NumT> & Qz,
                           Nessi::Vector<NumT> & Qz_err2,
                           void *temp=NULL);

  /**
   * \brief This function is described in section 3.32.
   *
   * This function calculates the momentum transfrom from the incident
   * and scattered wavevectors according to the equations
   * \f[
   * Q_x=-k_f\cos(azimuthal)\sin(polar)
   * \f]
   * \f[
   * Q_y=-k_f\sin(azimuthal)\sin(polar)
   * \f]
   * \f[
   * Q_z=k_i-k_f\cos(polar)
   * \f]
   * Where \f$k_i\f$ is the incident wavevector, \f$k_f\f$ is the
   * scattered wavevector, \f$Q_x\f$ is the x-component of the
   * momentum transfer, \f$Q_y\f$ is the y-component of the momentum
   * transfer, \f$Q_z\f$ is the z-component of the momentum transfer,
   * \f$azimuthal\f$ is the angle between the x-axis and the scattered
   * neturon, and \f$polar\f$ is the angle between the z-axis and the
   * scattered neutron. The uncertainty is calculated using the
   * assumption of uncorrelated uncertainties.
   *
   * \f[
   * \sigma^2_{Q_x} = (\cos(azimuthal) \sin(polar))^2 \sigma^2_{k_f} + 
   * k^2_f \times ((\sin(azimuthal) \sin(polar))^2 \sigma^2_{azimuthal} + 
   * (\cos(azimuthal) \cos(polar))^2 \sigma^2_{polar})
   * \f]
   * \f[
   * \sigma^2_{Q_y} = (\sin(azimuthal) \sin(polar))^2 \sigma^2_{k_f} + 
   * k^2_f \times ((\cos(azimuthal) \sin(polar))^2 \sigma^2_{azimuthal} + 
   * (\sin(azimuthal) \cos(polar))^2 \sigma^2_{polar})
   * \f]
   * \f[
   * \sigma^2_{Q_z} = \sigma^2_{k_i} + \cos^2(polar)\sigma^2_{k_f} + 
   * k^2_f \sin^2(polar) \sigma^2_{polar}
   * \f]
   *
   * \param initial_wavevector (INPUT) is the incident wavevector axis
   * in units of reciprocal Angstroms
   * \param initial_wavevector_err2 (INPUT) is the square of the
   * uncertainty of the incident wavevector axis
   * \param final_wavevector (INPUT) is the final wavevector axis in
   * units of reciprocal Angstroms
   * \param final_wavevector_err2 (INPUT) is the square of the
   * uncertainty of the final wavevector axis
   * \param azimuthal (INPUT) is the azimuthal angle in the equation
   * above in units of radians
   * \param azimuthal_err2 (INPUT) is the square of the uncertainty in
   * azumuthal
   * \param polar (INPUT) is the polar angle in the equation above in
   * units of radians
   * \param polar_err2 (INPUT) is the square of the uncertainty in
   * polar
   * \param Qx (OUTPUT) is the x-component of the momentum transfer,
   * \f$Q_x\f$, axis in units of reciprocal angstroms
   * \param Qx_err2 (OUTPUT) is the square of the uncertainty in the
   * x-component of the momentum transfer axis
   * \param Qy (OUTPUT) is the y-component of the momentum transfer,
   * \f$Q_y\f$, axis in units of reciprocal angstroms
   * \param Qy_err2 (OUTPUT) is the square of the uncertainty in the
   * y-component of the momentum transfer axis
   * \param Qz (OUTPUT) is the y-component of the momentum transfer,
   * \f$Q_y\f$, axis in units of reciprocal angstroms
   * \param Qz_err2 (OUTPUT) is the square of the uncertainty in the
   * y-component of the momentum transfer axis
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   */
  template <typename NumT>
  std::string
  init_scatt_wavevector_to_Q(const NumT initial_wavevector,
                             const NumT initial_wavevector_err2,
                             const NumT final_wavevector,
                             const NumT final_wavevector_err2,
                             const NumT azimuthal,
                             const NumT azimuthal_err2,
                             const NumT polar,
                             const NumT polar_err2,
                             NumT & Qx,
                             NumT & Qx_err2,
                             NumT & Qy,
                             NumT & Qy_err2,
                             NumT & Qz,
                             NumT & Qz_err2,
                             void *temp=NULL);

  /**
   * \}
   */ // end of init_scatt_wavevector_to_Q group

  /**
   * \defgroup init_scatt_wavevector_to_scalar_Q AxisManip::init_scatt_wavevector_to_scalar_Q
   * \{
   */

  /**
   * \brief This function is described in section 3.33.
   *
   * This function calculates the scalar momentum transfer from the
   * incident and scattered wavevectors according to the equation
   * \f[
   * Q[i]=\sqrt{k_i^2[i]+k_f^2[i]-2k_i[i]k_f[i]\cos(\theta)}
   * \f]
   * Where \f$Q\f$ is the scalar momentum transfer, \f$k_i\f$ is the
   * incident wavevector, \f$k_f\f$ is the final wavevector, and
   * \f$\theta\f$ is the angle between the z-axis and the scattered
   * neutron.
   *
   * Using the assumption that the uncertainties are uncorrelated,
   * the square of the uncertainty of the scalar momentum transfer
   * is given by
   * \f[
   * \sigma^2_Q[i]=\frac{1}{Q^2}((k_i[i]-k_f[i]
   * cos(\theta))^2\sigma^2_{k_i}[i]+(k_f[i]-k_i[i]
   * cos(\theta))^2\sigma^2_{k_f}[i]+
   * (k_i[i]k_f[i]sin(\theta))^2\sigma^2_{\theta})
   * \f]
   * where \f$\sigma_Q[i]\f$ is the uncertainty of the scalar momentum
   * transfer, \f$\sigma_{k_i}\f$ is the uncertainty of the incident
   * wavevector, \f$\sigma_{k_f}\f$ is the uncertainty of the final
   * wavevector, and \f$\sigma_{\theta}\f$ is the uncertainty of the angle
   * between the z-axis and the scattered neutron.
   *
   * \param initial_wavevector (INPUT) is the incident wavevector axis
   * in units of reciprocal Angstroms
   * \param initial_wavevector_err2 (INPUT) is the square of the
   * uncertainty of the incident wavevector axis
   * \param final_wavevector (INPUT) is the final wavevector axis in
   * units of reciprocal Angstroms
   * \param final_wavevector_err2 (INPUT) is the square of the
   * uncertainty of the final wavevector axis
   * \param polar (INPUT) is the polar angle in the equation above in
   * units of radians
   * \param polar_err2 (INPUT) is the square of the uncertainty in
   * polar
   * \param Q (OUTPUT) is the scalar momentum transfer, Q, axis in
   * units of reciprocal Angstroms
   * \param Q_err2 (OUTPUT) is the square of the uncertainty in the
   * scalar momentum transfer axis
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   *
   * \exception std::invalid_argument is thrown if the size of
   * initial_wavevector, initial_wavevector_err2, final_wavevector,
   * final_wavevector_err2, Q, and Q_err2 are not identical.
   */
  template <typename NumT>
  std::string
  init_scatt_wavevector_to_scalar_Q(
                           const Nessi::Vector<NumT> & initial_wavevector,
                           const Nessi::Vector<NumT> & initial_wavevector_err2,
                           const Nessi::Vector<NumT> & final_wavevector,
                           const Nessi::Vector<NumT> & final_wavevector_err2,
                           const NumT polar,
                           const NumT polar_err2,
                           Nessi::Vector<NumT> & Q,
                           Nessi::Vector<NumT> & Q_err2,
                           void *temp=NULL);

  /**
   * \brief This function is described in section 3.33.
   *
   * This function calculates the scalar momentum transfer from the
   * incident and scattered wavevectors according to the equation
   * \f[
   * Q[i]=\sqrt{k_i^2+k_f^2[i]-2k_i k_f[i]\cos(\theta)}
   * \f]
   * Where \f$Q\f$ is the scalar momentum transfer, \f$k_i\f$ is the
   * incident wavevector, \f$k_f\f$ is the final wavevector, and
   * \f$\theta\f$ is the angle between the z-axis and the scattered
   * neutron.
   *
   * Using the assumption that the uncertainties are uncorrelated,
   * the square of the uncertainty of the scalar momentum transfer
   * is given by
   * \f[
   * \sigma^2_Q[i]=\frac{1}{Q^2}((k_i-k_f[i]
   * cos(\theta))^2\sigma^2_{k_i}+(k_f[i]-k_i
   * cos(\theta))^2\sigma^2_{k_f}[i]+
   * (k_i k_f[i]sin(\theta))^2\sigma^2_{\theta})
   * \f]
   * where \f$\sigma_Q[i]\f$ is the uncertainty of the scalar momentum
   * transfer, \f$\sigma_{k_i}\f$ is the uncertainty of the incident
   * wavevector, \f$\sigma_{k_f}\f$ is the uncertainty of the final
   * wavevector, and \f$\sigma_{\theta}\f$ is the uncertainty of the angle
   * between the z-axis and the scattered neutron.
   *
   * \param initial_wavevector (INPUT) is the incident wavevector axis
   * in units of reciprocal Angstroms
   * \param initial_wavevector_err2 (INPUT) is the square of the
   * uncertainty of the incident wavevector axis
   * \param final_wavevector (INPUT) is the final wavevector axis in
   * units of reciprocal Angstroms
   * \param final_wavevector_err2 (INPUT) is the square of the
   * uncertainty of the final wavevector axis
   * \param polar (INPUT) is the polar angle in the equation above in
   * units of radians
   * \param polar_err2 (INPUT) is the square of the uncertainty in
   * polar
   * \param Q (OUTPUT) is the scalar momentum transfer, Q, axis in
   * units of reciprocal angstroms
   * \param Q_err2 (OUTPUT) is the square of the uncertainty in the
   * scalar momentum transfer axis
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   *
   * \exception std::invalid_argument is thrown if the size of
   * final_wavevector, final_wavevector_err2, Q, and Q_err2 are not
   * identical.
   */
  template <typename NumT>
  std::string
  init_scatt_wavevector_to_scalar_Q(
                             const NumT initial_wavevector,
                             const NumT initial_wavevector_err2,
                             const Nessi::Vector<NumT> & final_wavevector,
                             const Nessi::Vector<NumT> & final_wavevector_err2,
                             const NumT polar,
                             const NumT polar_err2,
                             Nessi::Vector<NumT> & Q,
                             Nessi::Vector<NumT> & Q_err2,
                             void *temp=NULL);

  /**
   * \brief This function is described in section 3.33.
   *
   * This function calculates the scalar momentum transfer from the
   * incident and scattered wavevectors according to the equation
   * \f[
   * Q[i]=\sqrt{k_i^2[i]+k_f^2-2k_i[i]k_f\cos(\theta)}
   * \f]
   * Where \f$Q\f$ is the scalar momentum transfer, \f$k_i\f$ is the
   * incident wavevector, \f$k_f\f$ is the final wavevector, and
   * \f$\theta\f$ is the angle between the z-axis and the scattered
   * neutron.
   *
   * Using the assumption that the uncertainties are uncorrelated,
   * the square of the uncertainty of the scalar momentum transfer
   * is given by
   * \f[
   * \sigma^2_Q[i]=\frac{1}{Q^2}((k_i[i]-k_f
   * cos(\theta))^2\sigma^2_{k_i}[i]+(k_f-k_i[i]
   * cos(\theta))^2\sigma^2_{k_f}+
   * (k_i[i]k_fsin(\theta))^2\sigma^2_{\theta})
   * \f]
   * where \f$\sigma_Q[i]\f$ is the uncertainty of the scalar momentum
   * transfer, \f$\sigma_{k_i}\f$ is the uncertainty of the incident
   * wavevector, \f$\sigma_{k_f}\f$ is the uncertainty of the final
   * wavevector, and \f$\sigma_{\theta}\f$ is the uncertainty of the angle
   * between the z-axis and the scattered neutron.
   *
   * \param initial_wavevector (INPUT) is the incident wavevector axis
   * in units of reciprocal Angstroms
   * \param initial_wavevector_err2 (INPUT) is the square of the
   * uncertainty of the incident wavevector axis
   * \param final_wavevector (INPUT) is the final wavevector axis in
   * units of reciprocal Angstroms
   * \param final_wavevector_err2 (INPUT) is the square of the
   * uncertainty of the final wavevector axis
   * \param polar (INPUT) is the polar angle in the equation above in
   * units of radians
   * \param polar_err2 (INPUT) is the square of the uncertainty in
   * polar
   * \param Q (OUTPUT) is the scalar momentum transfer, Q, axis in
   * units of reciprocal angstroms
   * \param Q_err2 (OUTPUT) is the square of the uncertainty in the
   * scalar momentum transfer axis
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   *
   * \exception std::invalid_argument is thrown if the size of
   * initial_wavevector, initial_wavevector_err2, Q, and Q_err2 are
   * not identical.
   */
  template <typename NumT>
  std::string
  init_scatt_wavevector_to_scalar_Q(
                           const Nessi::Vector<NumT> & initial_wavevector,
                           const Nessi::Vector<NumT> & initial_wavevector_err2,
                           const NumT final_wavevector,
                           const NumT final_wavevector_err2,
                           const NumT polar,
                           const NumT polar_err2,
                           Nessi::Vector<NumT> & Q,
                           Nessi::Vector<NumT> & Q_err2,
                           void *temp=NULL);

  /**
   * \brief This function is described in section 3.33.
   *
   * This function calculates the scalar momentum transfer from the
   * incident and scattered wavevectors according to the equation
   * \f[
   * Q=\sqrt{k_i^2+k_f^2-2k_ik_f\cos(\theta)}
   * \f]
   * Where \f$Q\f$ is the scalar momentum transfer, \f$k_i\f$ is the
   * incident wavevector, \f$k_f\f$ is the final wavevector, and
   * \f$\theta\f$ is the angle between the z-axis and the scattered
   * neutron.
   *
   * Using the assumption that the uncertainties are uncorrelated,
   * the square of the uncertainty of the scalar momentum transfer
   * is given by
   * \f[
   * \sigma^2_Q=\frac{1}{Q^2}((k_i-k_f
   * cos(\theta))^2\sigma^2_{k_i}+(k_f-k_i
   * cos(\theta))^2\sigma^2_{k_f}+
   * (k_ik_fsin(\theta))^2\sigma^2_{\theta})
   * \f]
   * where \f$\sigma_Q\f$ is the uncertainty of the scalar momentum
   * transfer, \f$\sigma_{k_i}\f$ is the uncertainty of the incident
   * wavevector, \f$\sigma_{k_f}\f$ is the uncertainty of the final
   * wavevector, and \f$\sigma_{\theta}\f$ is the uncertainty of the angle
   * between the z-axis and the scattered neutron.
   *
   * \param initial_wavevector (INPUT) is the incident wavevector axis
   * in units of reciprocal Angstroms
   * \param initial_wavevector_err2 (INPUT) is the square of the
   * uncertainty of the incident wavevector axis
   * \param final_wavevector (INPUT) is the final wavevector axis in
   * units of reciprocal Angstroms
   * \param final_wavevector_err2 (INPUT) is the square of the
   * uncertainty of the final wavevector axis
   * \param polar (INPUT) is the polar angle in the equation above in
   * units of radians
   * \param polar_err2 (INPUT) is the square of the uncertainty in
   * polar
   * \param Q (OUTPUT) is the scalar momentum transfer, Q, axis in
   * units of reciprocal angstroms
   * \param Q_err2 (OUTPUT) is the square of the uncertainty in the
   * scalar momentum transfer axis
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   */
  template <typename NumT>
  std::string
  init_scatt_wavevector_to_scalar_Q(const NumT initial_wavevector,
                                    const NumT initial_wavevector_err2,
                                    const NumT final_wavevector,
                                    const NumT final_wavevector_err2,
                                    const NumT polar,
                                    const NumT polar_err2,
                                    NumT & Q,
                                    NumT & Q_err2,
                                    void *temp=NULL);

  /**
   * \}
   */ // end of init_scatt_wavevector_to_scalar_Q group

  /**
   * \defgroup time_offset_dgs AxisManip::time_offset_dgs
   * \{
   */

  /**
   * \brief This function is described in section 3.26.
   *
   * This function calculates the time offset for a direct geometry
   * spectrometer according to the equation
   * \f[
   * t_0=t-\frac{L}{v}
   * \f]
   * Where \f$t_0\f$ is the time offset, \f$t\f$ is the time observed
   * at the downstream monitor, \f$L\f$ is the total flight path for
   * the downstream monitor, and \f$v\f$ is the velocity of the
   * incident neutrons. The uncertainty is calculated using the
   * assumption of uncorrelated uncertainties.
   *
   * \f[
   * \sigma^2_{t_0} = \sigma^2_t + \left(\frac{1}{v}\right)^2 \sigma^2_L + 
   * \left(\frac{L}{v^2}\right)^2 \sigma^2_v
   * \f]
   *
   * \param dist_downstream_monitor (INPUT) is the total flight path
   * for the downstream monitor in units of meter
   * \param dist_downstream_monitor_err2 (INPUT) is the square of the
   * uncertainty in dist_downstream_monitor
   * \param time_downstream_monitor (INPUT) is the time observed at
   * the downstream monitor in units of micro-seconds
   * \param time_downstream_monitor_err2 (INPUT) is the square of the
   * uncertainty in time_downstream_monitor
   * \param initial_velocity (INPUT) is the velocity of the incident
   * neutrons in unites of meter/micro-seconds
   * \param initial_velocity_err2 (INPUT) is the square of the
   * uncertainty in initial_velocity
   * \param time_offset (OUTPUT) is the time offset of the neutron
   * emitting from the source assuming the velocity supplied in units
   * of micro-seconds
   * \param time_offset_err2 (OUTPUT) is the square of the uncertainty
   * in time_offset
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   */
  template <typename NumT>
  std::string
  time_offset_dgs(const NumT dist_downstream_monitor,
                  const NumT dist_downstream_monitor_err2,
                  const NumT time_downstream_monitor,
                  const NumT time_downstream_monitor_err2,
                  const NumT initial_velocity,
                  const NumT initial_velocity_err2,
                  NumT & time_offset,
                  NumT & time_offset_err2,
                  void *temp=NULL);

  /**
   * \}
   */ // end of time_offset_dgs group

  /**
   * \defgroup tof_to_final_velocity_dgs AxisManip::tof_to_final_velocity_dgs
   * \{
   */

  /**
   * \brief This function is described in section 3.27.
   *
   * This function calculates the final velocity of the neutron for a
   * direct geometry spectrometer according to the equation
   * \f[
   * v_f[i]=\frac{L_D}{t[i]-\frac{L_S}{v_i}-t_0}
   * \f]
   * Where \f$v_f[i]\f$ is the final velocity of the neutron,
   * \f$L_D\f$ is the distance from the sample to the detector,
   * \f$t[i]\f$ is the total time-of-flight, \f$L_S\f$ is the distance
   * from source to sample, \f$v_i\f$ is the initial velocity of the
   * neutron, and \f$t_0\f$ is the time-offset of the neutron. The
   * uncertainty is calculated using the assumption of uncorrelated
   * uncertainties.
   *
   * \f[
   * \sigma^2_{v_f}[i] = \frac{\sigma^2_{L_D}}{(t[i]-\frac{L_S}{v_i}-t_0)^2} +
   * \frac{L^2_D \sigma^2_{L_S}}{v^2_i (t[i]-\frac{L_S}{v_i}-t_0)^4} +
   * \frac{L^2_S L^2_D \sigma^2_{v_i}}{v^4_i (t[i]-\frac{L_S}{v_i}-t_0)^4}
   * + \frac{L^2_D \sigma^2_{t_0}}{(t[i]-\frac{L_S}{v_i}-t_0)^4}
   * \f]
   *
   * \param tof (INPUT) is the time-of-flight axis in units of
   * micro-seconds
   * \param tof_err2 (INPUT) is the square of the uncertainty in the
   * time-of-flight axis
   * \param initial_velocity (INPUT) is the initial velocity of the
   * neutron in units of meter/mirco-seconds
   * \param initial_velocity_err2 (INPUT) is the square of the
   * uncertainty in initial_velocity
   * \param time_offset (INPUT) is the time offset of the neutron
   * emitting from the source assuming the velocity supplied in units
   * of micro-seconds
   * \param time_offset_err2 (INPUT) is the square of the uncertainty
   * in time_offset
   * \param dist_source_sample (INPUT) is the distance from source to
   * sample in units of meter
   * \param dist_source_sample_err2 (INPUT) is the square of the
   * uncertainty in dist_source_sample
   * \param dist_sample_detector (INPUT) is the distance from sample
   * to detector in units of meter
   * \param dist_sample_detector_err2 (INPUT) is the square of the
   * uncertainty in dist_sample_detector
   * \param final_velocity (OUTPUT) is the final velocity axis of the
   * neutron in units of meter/micro-second
   * \param final_velocity_err2 (OUTPUT) is the square of the
   * uncertainty in the final velocity axis
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   */
  template <typename NumT>
  std::string
  tof_to_final_velocity_dgs(Nessi::Vector<NumT> const & tof,
                            Nessi::Vector<NumT> const & tof_err2,
                            const NumT initial_velocity,
                            const NumT initial_velocity_err2,
                            const NumT time_offset,
                            const NumT time_offset_err2,
                            const NumT dist_source_sample,
                            const NumT dist_source_sample_err2,
                            const NumT dist_sample_detector,
                            const NumT dist_sample_detector_err2,
                            Nessi::Vector<NumT> & final_velocity,
                            Nessi::Vector<NumT> & final_velocity_err2,
                            void *temp=NULL);

  /**
   * \brief This function is described in section 3.27.
   *
   * This function calculates the final velocity of the neutron for a
   * direct geometry spectrometer according to the equation
   * \f[
   * v_f=\frac{L_D}{t-\frac{L_S}{v_i}-t_0}
   * \f]
   * Where \f$v_f\f$ is the final velocity of the neutron, \f$L_D\f$
   * is the distance from the sample to the detector, \f$t\f$ is the
   * total time-of-flight, \f$L_S\f$ is the distance from source to
   * sample, \f$v_i\f$ is the initial velocity of the neutron, and
   * \f$t_0\f$ is the time-offset of the neutron. The uncertainty is
   * calculated using the assumption of uncorrelated uncertainties.
   *
   * \f[
   * \sigma^2_{v_f} = \frac{\sigma^2_{L_D}}{(t-\frac{L_S}{v_i}-t_0)^2} +
   * \frac{L^2_D \sigma^2_{L_S}}{v^2_i (t-\frac{L_S}{v_i}-t_0)^4} +
   * \frac{L^2_S L^2_D \sigma^2_{v_i}}{v^4_i (t-\frac{L_S}{v_i}-t_0)^4}
   * + \frac{L^2_D \sigma^2_{t_0}}{(t-\frac{L_S}{v_i}-t_0)^4}
   * \f]
   *  
   * \param tof (INPUT) is the time-of-flight axis in units of
   * micro-seconds
   * \param tof_err2 (INPUT) is the square of the uncertainty in the
   * time-of-flight axis
   * \param initial_velocity (INPUT) is the initial velocity of the
   * neutron in units of meter/mirco-seconds
   * \param initial_velocity_err2 (INPUT) is the square of the
   * uncertainty in initial_velocity
   * \param time_offset (INPUT) is the time offset of the neutron
   * emitting from the source assuming the velocity supplied in units
   * of micro-seconds
   * \param time_offset_err2 (INPUT) is the square of the uncertainty
   * in time_offset
   * \param dist_source_sample (INPUT) is the distance from source to
   * sample in units of meter
   * \param dist_source_sample_err2 (INPUT) is the square of the
   * uncertainty in dist_source_sample
   * \param dist_sample_detector (INPUT) is the distance from sample
   * to detector in units of meter
   * \param dist_sample_detector_err2 (INPUT) is the square of the
   * uncertainty in dist_sample_detector
   * \param final_velocity (OUTPUT) is the final velocity axis of the
   * neutron in units of meter/micro-second
   * \param final_velocity_err2 (OUTPUT) is the square of the
   * uncertainty in the final velocity axis
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   */
  template <typename NumT>
  std::string
  tof_to_final_velocity_dgs(const NumT tof,
                            const NumT tof_err2,
                            const NumT initial_velocity,
                            const NumT initial_velocity_err2,
                            const NumT time_offset,
                            const NumT time_offset_err2,
                            const NumT dist_source_sample,
                            const NumT dist_source_sample_err2,
                            const NumT dist_sample_detector,
                            const NumT dist_sample_detector_err2,
                            NumT & final_velocity,
                            NumT & final_velocity_err2,
                            void *temp=NULL);

  /**
   * \}
   */ // end of tof_to_final_velocity_dgs group

  /**
   * \defgroup tof_to_initial_velocity_igs AxisManip::tof_to_initial_velocity_igs
   * \{
   */

  /**
   * \brief This function is described in section 3.28.
   *
   * This function calculates the initial velocity of an indirect
   * geometry spectromer according to the equation
   * \f[
   * v_i[i]=\frac{L_S}{t[i]-\frac{L_D}{v_f}-t_0}
   * \f]
   * Where \f$v_i[i]\f$ is the initial velocity of the neutron,
   * \f$L_S\f$ is the distance from the source to the sample,
   * \f$t[i]\f$ is the total time-of-flight, \f$L_D\f$ is the distance
   * from the sample to the detector, \f$v_f\f$ is the final velocity
   * of the neutron, and \f$t_0\f$ is the time-offset of the
   * neutron. The uncertainty is calculated using the assumption of
   * uncorrelated uncertainties.
   *
   * \param tof (INPUT) is the time-of-flight axis in units of
   * micro-seconds
   * \param tof_err2 (INPUT) is the square of the uncertainty in the
   * time-of-flight axis
   * \param final_velocity (INPUT) is the final velocity of the
   * neutron in units of meter/mirco-seconds
   * \param final_velocity_err2 (INPUT) is the square of the
   * uncertainty in final_velocity
   * \param time_offset (INPUT) is the time offset of the neutron
   * emitting from the source assuming the velocity supplied in units
   * of micro-seconds
   * \param time_offset_err2 (INPUT) is the square of the uncertainty
   * in time_offset
   * \param dist_source_sample (INPUT) is the distance from source to
   * sample in units of meter
   * \param dist_source_sample_err2 (INPUT) is the square of the
   * uncertainty in dist_source_sample
   * \param dist_sample_detector (INPUT) is the distance from sample
   * to detector in units of meter
   * \param dist_sample_detector_err2 (INPUT) is the square of the
   * uncertainty in dist_sample_detector
   * \param initial_velocity (OUTPUT) is the initial velocity axis of
   * the neutron in units of meter/second
   * \param initial_velocity_err2 (OUTPUT) is the square of the
   * uncertainty in the initial velocity axis
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   */
  template <typename NumT>
  std::string
  tof_to_initial_velocity_igs(const Nessi::Vector<NumT> & tof,
                              const Nessi::Vector<NumT> & tof_err2,
                              const NumT final_velocity,
                              const NumT final_velocity_err2,
                              const NumT time_offset,
                              const NumT time_offset_err2,
                              const NumT dist_source_sample,
                              const NumT dist_source_sample_err2,
                              const NumT dist_sample_detector,
                              const NumT dist_sample_detector_err2,
                              Nessi::Vector<NumT> & initial_velocity,
                              Nessi::Vector<NumT> & initial_velocity_err2,
                              void *temp=NULL);

  /**
   * \brief This function is described in section 3.28.
   *
   * This function calculates the initial velocity of an indirect
   * geometry spectromer according to the equation
   * \f[
   * v_i=\frac{L_S}{t-\frac{L_D}{v_f}-t_0}
   * \f]
   * Where \f$v_i\f$ is the initial velocity of the neutron, \f$L_S\f$
   * is the distance from the source to the sample, \f$t\f$ is the
   * total time-of-flight, \f$L_D\f$ is the distance from the sample
   * to the detector, \f$v_f\f$ is the final velocity of the neutron,
   * and \f$t_0\f$ is the time-offset of the neutron. The uncertainty
   * is calculated using the assumption of uncorrelated uncertainties.
   *
   * \param tof (INPUT) is the time-of-flight axis in units of
   * micro-seconds
   * \param tof_err2 (INPUT) is the square of the uncertainty in the
   * time-of-flight axis
   * \param final_velocity (INPUT) is the final velocity of the
   * neutron in units of meter/mirco-seconds
   * \param final_velocity_err2 (INPUT) is the square of the
   * uncertainty in final_velocity
   * \param time_offset (INPUT) is the time offset of the neutron
   * emitting from the source assuming the velocity supplied in units
   * of micro-seconds
   * \param time_offset_err2 (INPUT) is the square of the uncertainty
   * in time_offset
   * \param dist_source_sample (INPUT) is the distance from source to
   * sample in units of meter
   * \param dist_source_sample_err2 (INPUT) is the square of the
   * uncertainty in dist_source_sample
   * \param dist_sample_detector (INPUT) is the distance from sample
   * to detector in units of meter
   * \param dist_sample_detector_err2 (INPUT) is the square of the
   * uncertainty in dist_sample_detector
   * \param initial_velocity (OUTPUT) is the initial velocity axis of
   * the neutron in units of meter/second
   * \param initial_velocity_err2 (OUTPUT) is the square of the
   * uncertainty in the initial velocity axis
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   */
  template <typename NumT>
  std::string
  tof_to_initial_velocity_igs(const NumT tof,
                              const NumT tof_err2,
                              const NumT final_velocity,
                              const NumT final_velocity_err2,
                              const NumT time_offset,
                              const NumT time_offset_err2,
                              const NumT dist_source_sample,
                              const NumT dist_source_sample_err2,
                              const NumT dist_sample_detector,
                              const NumT dist_sample_detector_err2,
                              NumT & initial_velocity,
                              NumT & initial_velocity_err2,
                              void *temp=NULL);

  /**
   * \}
   */ // end of tof_to_initial_velocity_igs group

  /**
   * \defgroup tof_to_initial_wavelength_igs AxisManip::tof_to_initial_wavelength_igs
   * \{
   */

  /**
   * \brief This function is described in section 3.29.
   *
   * This function calculates the initial wavelength for an inverse
   * geometry spectrometer according to the equation
   * \f[
   * \lambda_i[i]=\frac{h}{m_n L_S}
   *              \left(t[i]-\frac{m_n \lambda_f L_D}{h} -t_0 \right)
   * \f]
   * Where \f$\lambda_i[i]\f$ is the incident wavelength, \f$h\f$ is
   * Planck's constant, \f$m_n\f$ is the mass of the neutron,
   * \f$L_S\f$ is the distance from the source to the sample,
   * \f$t[i]\f$ is the total time-of-flight, \f$\lambda_f\f$ is the
   * final wavelength, \f$L_D\f$ is the distance from the sample to
   * the detector, and \f$t_0\f$ is the time offset.
   *
   * Assuming that the uncertainties are uncorrelated, the square of
   * the uncertainty of the initial wavelength for an inverse geometry
   * spectromer is defined by
   *
   * \f[
   * \sigma^2_{\lambda_i}[i]=
   * \left(\frac{\lambda_i[i]}{L_S}\right)^2*\sigma^2_{L_S}
   * + \left(\frac{h}{m_n*L_S}\right)^2(\sigma^2_t+\sigma^2_{t_0})+
   * \left(\frac{\lambda_f}{L_S}\right)^2\sigma^2_{L_D}
   * + \left(\frac{L_D}{L_S}\right)^2\sigma^2_{\lambda_f}
   * \f]
   *
   * where \f$\sigma_{\lambda_i}\f$ is the uncertainty of the initial
   * wavelength axis, \f$\sigma_{L_S}\f$ is the uncertainty of the
   * distance from the source to the sample, \f$\sigma_t\f$ is the
   * uncertainty of the time-of-flight, \f$\sigma_{t_0}\f$ is the
   * uncertainty of the time-offset, \f$\sigma_{L_D}\f$ is the
   * uncertainty of the distance from the sample to the detector, and
   * \f$\sigma_{\lambda_f}\f$ the uncertainty of the final wavelength.
   *
   *\param tof (INPUT) is the time-of-flight axis in units of
   * micro-seconds
   * \param tof_err2 (INPUT) is the square of the uncertainty in the
   * time-of-flight axis
   * \param final_wavelength (INPUT) is the final wavelength of the
   * neutron in units of Angstroms
   * \param final_wavelength_err2 (INPUT) is the square of the
   * uncertainty in final_wavelength
   * \param time_offset (INPUT) is the time offset of the neutron
   * emitting from the source assuming the velocity supplied in units
   * of micro-seconds
   * \param time_offset_err2 (INPUT) is the square of the uncertainty
   * in time_offset
   * \param dist_source_sample (INPUT) is the distance from source to
   * sample in units of meter
   * \param dist_source_sample_err2 (INPUT) is the square of the
   * uncertainty in dist_source_sample
   * \param dist_sample_detector (INPUT) is the distance from sample
   * to detector in units of meter
   * \param dist_sample_detector_err2 (INPUT) is the square of the
   * uncertainty in dist_sample_detector
   * \param initial_wavelength (OUTPUT) is the initial wavelength axis
   * in units of Angstroms
   * \param initial_wavelength_err2 (OUTPUT) is the square of the
   * uncertainty of the initial wavelength axis
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   *
   * \exception std::invalid_argument is thrown if the size of tof,
   * tof_err2, initial_wavelength, and initial_wavelength are not
   * identical.
   */
  template <typename NumT>
  std::string
  tof_to_initial_wavelength_igs(const Nessi::Vector<NumT> & tof,
                                const Nessi::Vector<NumT> & tof_err2,
                                const NumT final_wavelength,
                                const NumT final_wavelength_err2,
                                const NumT time_offset,
                                const NumT time_offset_err2,
                                const NumT dist_source_sample,
                                const NumT dist_source_sample_err2,
                                const NumT dist_sample_detector,
                                const NumT dist_sample_detector_err2,
                                Nessi::Vector<NumT> & initial_wavelength,
                                Nessi::Vector<NumT> & initial_wavelength_err2,
                                void *temp=NULL);

  /**
   * \brief This function is described in section 3.29.
   *
   * This function calculates the initial wavelength for an inverse
   * geometry spectromer according to the equation
   * \f[
   * \lambda_i=\frac{h}{m_n L_S}
   *              \left(t-\frac{m_n \lambda_f L_D}{h} -t_0 \right)
   * \f]
   * Where \f$\lambda_i\f$ is the incident wavelength, \f$h\f$ is
   * Planck's constant, \f$m_n\f$ is the mass of the neutron,
   * \f$L_S\f$ is the distance from the source to the sample, \f$t\f$
   * is the total time-of-flight, \f$\lambda_f\f$ is the final
   * wavelength, \f$L_D\f$ is the distance from the sample to the
   * detector, and \f$t_0\f$ is the time offset.
   *
   * Assuming that the uncertainties are uncorrelated, the square of
   * the uncertainty of the initial wavelength for an inverse geometry
   * spectromer is defined by
   *
   * \f[
   * \sigma^2_{\lambda_i}=
   * \left(\frac{\lambda_i}{L_S}\right)^2*\sigma^2_{L_S}
   * + \left(\frac{h}{m_n*L_S}\right)^2(\sigma^2_t+\sigma^2_{t_0})+
   * \left(\frac{\lambda_f}{L_S}\right)^2\sigma^2_{L_D}
   * + \left(\frac{L_D}{L_S}\right)^2\sigma^2_{\lambda_f}
   * \f]
   *
   * where \f$\sigma_{\lambda_i}\f$ is the uncertainty of the initial
   * wavelength axis, \f$\sigma_{L_S}\f$ is the uncertainty of the
   * distance from the source to the sample, \f$\sigma_t\f$ is the
   * uncertainty of the time-of-flight, \f$\sigma_{t_0}\f$ is the
   * uncertainty of the time-offset, \f$\sigma_{L_D}\f$ is the
   * uncertainty of the distance from the sample to the detector, and
   * \f$\sigma_{\lambda_f}\f$ the uncertainty of the final wavelength.
   *
   *\param tof (INPUT) is the time-of-flight axis in units of
   * micro-seconds
   * \param tof_err2 (INPUT) is the square of the uncertainty in the
   * time-of-flight axis
   * \param final_wavelength (INPUT) is the final wavelength of the
   * neutron in units of Angstroms
   * \param final_wavelength_err2 (INPUT) is the square of the
   * uncertainty in final_wavelength
   * \param time_offset (INPUT) is the time offset of the neutron
   * emitting from the source assuming the velocity supplied in units
   * of micro-seconds
   * \param time_offset_err2 (INPUT) is the square of the uncertainty
   * in time_offset
   * \param dist_source_sample (INPUT) is the distance from source to
   * sample in units of meter
   * \param dist_source_sample_err2 (INPUT) is the square of the
   * uncertainty in dist_source_sample
   * \param dist_sample_detector (INPUT) is the distance from sample
   * to detector in units of meter
   * \param dist_sample_detector_err2 (INPUT) is the square of the
   * uncertainty in dist_sample_detector
   * \param initial_wavelength (OUTPUT) is the initial wavelength axis
   * in units of Anstrom
   * \param initial_wavelength_err2 (OUTPUT) is the square of the
   * uncertainty of the initial wavelength axis
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   */
  template <typename NumT>
  std::string
  tof_to_initial_wavelength_igs(const NumT tof,
                                const NumT tof_err2,
                                const NumT final_wavelength,
                                const NumT final_wavelength_err2,
                                const NumT time_offset,
                                const NumT time_offset_err2,
                                const NumT dist_source_sample,
                                const NumT dist_source_sample_err2,
                                const NumT dist_sample_detector,
                                const NumT dist_sample_detector_err2,
                                NumT & initial_wavelength,
                                NumT & initial_wavelength_err2,
                                void *temp=NULL);

  /**
   * \}
   */ // end of tof_to_initial_wavelength_igs group

  /**
   * \defgroup tof_to_Q AxisManip::tof_to_Q
   * \{
   */

  /**
   * \brief This function is described in section 3.34.
   *
   * This function converts the time-of-flight to momentum
   * transfer. This is done in two steps. First by calculating the
   * sclar momentum transfer according to the equation
   * \f[
   * Q[i]=\frac{4\pi m_n L \sin(polar)}{h TOF[i]}
   * \f]
   * Where \f$Q[i]\f$ is the scalar momentum transfer, \f$m_n\f$ is
   * the mass of the neutron, \f$L\f$ is the total flight path,
   * \f$polar\f$ is the angle between the z-axis and the scattered
   * neutron, \f$h\f$ is Planck's constant, and \f$TOF[i]\f$ is the
   * time-of-flight. The uncertainty is calculated using the
   * assumption of uncorrelated uncertainties.
   *
   * The three components of the momentum transfer are described by
   * the equations
   * \f[
   * Q_x=-Q\cos(azimuthal)\sin(polar)
   * \f]
   * \f[
   * Q_y=-Q\sin(azimuthal)\sin(polar)
   * \f]
   * \f[
   * Q_z=Q(1-\cos(polar))
   * \f]
   * Where \f$Q_x\f$ is the x-component of the momentum transfer,
   * \f$Q_y\f$ is the y-component of the momentum transfer, \f$Q_z\f$
   * is the z-component of the momentum transfer, \f$azimuthal\f$ is
   * the angle between the x-axis and the scattered neutron, and
   * \f$polar\f$ is the angle between the z-axis and the scattered
   * neutron. The uncertainty is calculated using the assumption of
   * uncorrelated uncertainties.
   *
   * \param tof (INPUT) is the time-of-flight axis in units of
   * micro-seconds
   * \param tof_err2 (INPUT) is the square of the uncertainty in the
   * time-of-flight axis
   * \param pathlength (INPUT) is the total flight path of the neutron
   * in units of meter
   * \param pathlength_err2 (INPUT) is the square of the uncertainty
   * in pathlength
   * \param azimuthal (INPUT) is the azimuthal angle in the equation
   * above in units of radians
   * \param azimuthal_err2 (INPUT) is the square of the uncertainty in
   * azimuthal
   * \param polar (INPUT) is the polar angle in the equation above in units of
   * radians
   * \param polar_err2 (INPUT) is the square of the uncertainty in
   * polar
   * \param Qx (OUTPUT) is the x-component of the momentum transfer,
   * \f$Q_x\f$, axis in units of reciprocal angstroms
   * \param Qx_err2 (OUTPUT) is the square of the uncertainty in the
   * x-component of the momentum transfer axis
   * \param Qy (OUTPUT) is the y-component of the momentum transfer,
   * \f$Q_y\f$, axis in units of reciprocal angstroms
   * \param Qy_err2 (OUTPUT) is the square of the uncertainty in the
   * y-component of the momentum transfer axis
   * \param Qz (OUTPUT) is the z-component of the momentum transfer,
   * \f$Q_y\f$, axis in units of reciprocal angstroms
   * \param Qz_err2 (OUTPUT) is the square of the uncertainty in the
   * z-component of the momentum transfer axis
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   */
  template <typename NumT>
  std::string
  tof_to_Q(const Nessi::Vector<NumT> & tof,
           const Nessi::Vector<NumT> & tof_err2,
           const NumT pathlength,
           const NumT pathlength_err2,
           const NumT azimuthal,
           const NumT azimuthal_err2,
           const NumT polar,
           const NumT polar_err2,
           Nessi::Vector<NumT> & Qx,
           Nessi::Vector<NumT> & Qx_err2,
           Nessi::Vector<NumT> & Qy,
           Nessi::Vector<NumT> & Qy_err2,
           Nessi::Vector<NumT> & Qz,
           Nessi::Vector<NumT> & Qz_err2,
           void *temp=NULL);

  /**
   * \brief This function is described in section 3.34.
   *
   * This function converts the time-of-flight to momentum
   * transfer. This is done in two steps. First by calculating the
   * sclar momentum transfer according to the equation
   * \f[
   * Q=\frac{4\pi m_n L \sin(polar)}{h TOF}
   * \f]
   * Where \f$Q\f$ is the scalar momentum transfer, \f$m_n\f$ is the
   * mass of the neutron, \f$L\f$ is the total flight path,
   * \f$polar\f$ is the angle between the z-axis and the scattered
   * neutron, \f$h\f$ is Planck's constant, and \f$TOF\f$ is the
   * time-of-flight. The uncertainty is calculated using the
   * assumption of uncorrelated uncertainties.
   *
   * The three components of the momentum transfer are described by
   * the equations
   * \f[
   * Q_x=-Q\cos(azimuthal)\sin(polar)
   * \f]
   * \f[
   * Q_y=-Q\sin(azimuthal)\sin(polar)
   * \f]
   * \f[
   * Q_z=Q(1-\cos(polar))
   * \f]
   * Where \f$Q_x\f$ is the x-component of the momentum transfer,
   * \f$Q_y\f$ is the y-component of the momentum transfer, \f$Q_z\f$
   * is the z-component of the momentum transfer, \f$azimuthal\f$ is
   * the angle between the x-axis and the scattered neutron, and
   * \f$polar\f$ is the angle between the z-axis and the scattered
   * neutron. The uncertainty is calculated using the assumption of
   * uncorrelated uncertainties.
   *
   * \param tof (INPUT) is the time-of-flight axis in units of
   * micro-seconds
   * \param tof_err2 (INPUT) is the square of the uncertainty in the
   * time-of-flight axis
   * \param pathlength (INPUT) is the total flight path of the neutron
   * in units of meter
   * \param pathlength_err2 (INPUT) is the square of the uncertainty
   * in pathlength
   * \param azimuthal (INPUT) is the azimuthal angle in the equation
   * above in units of radians
   * \param azimuthal_err2 (INPUT) is the square of the uncertainty in
   * azimuthal
   * \param polar (INPUT) is the polar angle in the equation above in units of
   * radians
   * \param polar_err2 (INPUT) is the square of the uncertainty in
   * polar
   * \param Qx (OUTPUT) is the x-component of the momentum transfer,
   * \f$Q_x\f$, axis in units of reciprocal angstroms
   * \param Qx_err2 (OUTPUT) is the square of the uncertainty in the
   * x-component of the momentum transfer axis
   * \param Qy (OUTPUT) is the y-component of the momentum transfer,
   * \f$Q_y\f$, axis in units of reciprocal angstroms
   * \param Qy_err2 (OUTPUT) is the square of the uncertainty in the
   * y-component of the momentum transfer axis
   * \param Qz (OUTPUT) is the z-component of the momentum transfer,
   * \f$Q_y\f$, axis in units of reciprocal angstroms
   * \param Qz_err2 (OUTPUT) is the square of the uncertainty in the
   * z-component of the momentum transfer axis
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   */
  template <typename NumT>
  std::string
  tof_to_Q(const NumT tof,
           const NumT tof_err2,
           const NumT pathlength,
           const NumT pathlength_err2,
           const NumT azimuthal,
           const NumT azimuthal_err2,
           const NumT polar,
           const NumT polar_err2,
           NumT & Qx,
           NumT & Qx_err2,
           NumT & Qy,
           NumT & Qy_err2,
           NumT & Qz,
           NumT & Qz_err2,
           void *temp=NULL);

  /**
   * \}
   */ // end of tof_to_Q group

  /**
   * \defgroup tof_to_scalar_Q AxisManip::tof_to_scalar_Q
   * \{
   */

  /**
   * \brief This function is described in section 3.17.
   *
   * This function converts time-of-flight to scalar momentum transfer
   * according to the equation
   * \f[
   * Q[i]=\frac{4\pi m_n L \sin(polar)}{h TOF[i]}
   * \f]
   * Where \f$Q[i]\f$ is the scalar momentum transfer, \f$m_n\f$ is
   * the mass of the neutron, \f$L\f$ is the total flight path of the
   * neutron, \f$polar\f$ is the angle between the positive z-axis and
   * the direction of the scattered neutron, \f$h\f$ is Planck's
   * constant, and \f$TOF[i]\f$ is the time-of-flight. The uncertainty
   * is calculated using the assumption of uncorrelated uncertainties.
   *
   * \param tof (INPUT) is the time-of-flight axis in units of
   * micro-seconds
   * \param tof_err2 (INPUT) is the square of the uncertainty in the
   * time-of-flight axis
   * \param pathlength (INPUT) is the total flight path of the neutron
   * in units of meter
   * \param pathlength_err2 (INPUT) is the square of the uncertainty
   * in pathlength
   * \param polar (INPUT) is the polar angle in the equation above in
   * units of radians
   * \param polar_err2 (INPUT) is the square of the uncertainty in
   * polar
   * \param Q (OUTPUT) is the scalar momentum transfer, Q, axis in
   * units of reciprocal angstroms
   * \param Q_err2 (OUTPUT) is the square of the uncertainty in the
   * scalar momentum transfer axis
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   */
  template <typename NumT>
  std::string
  tof_to_scalar_Q(Nessi::Vector<NumT> const & tof,
                  Nessi::Vector<NumT> const & tof_err2,
                  const NumT pathlength,
                  const NumT pathlength_err2,
                  const NumT polar,
                  const NumT polar_err2,
                  Nessi::Vector<NumT> & Q,
                  Nessi::Vector<NumT> & Q_err2,
                  void *temp=NULL);

  /**
   * \brief This function is described in section 3.17.
   *
   * This function converts time-of-flight to scalar momentum transfer
   * according to the equation
   * \f[
   * Q=\frac{4\pi m_n L \sin(polar)}{h TOF}
   * \f]
   * Where \f$Q\f$ is the scalar momentum transfer, \f$m_n\f$ is
   * the mass of the neutron, \f$L\f$ is the total flight path of the
   * neutron, \f$polar\f$ is the angle between the positive z-axis and
   * the direction of the scattered neutron, \f$h\f$ is Planck's
   * constant, and \f$TOF\f$ is the time-of-flight. The uncertainty
   * is calculated using the assumption of uncorrelated uncertainties.
   *
   * \param tof (INPUT) is the time-of-flight axis in units of
   * micro-seconds
   * \param tof_err2 (INPUT) is the square of the uncertainty in the
   * time-of-flight axis
   * \param pathlength (INPUT) is the total flight path of the neutron
   * in units of meter
   * \param pathlength_err2 (INPUT) is the square of the uncertainty
   * in pathlength
   * \param polar (INPUT) is the polar angle in the equation above in
   * units of radians
   * \param polar_err2 (INPUT) is the square of the uncertainty in
   * polar
   * \param Q (OUTPUT) is the scalar momentum transfer, Q, axis in
   * units of reciprocal angstroms
   * \param Q_err2 (OUTPUT) is the square of the uncertainty in the
   * scalar momentum transfer axis
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   */
  template <typename NumT>
  std::string
  tof_to_scalar_Q(const NumT tof,
                  const NumT tof_err2,
                  const NumT pathlength,
                  const NumT pathlength_err2,
                  const NumT polar,
                  const NumT polar_err2,
                  NumT & Q,
                  NumT & Q_err2,
                  void *temp=NULL);

  /**
   * \}
   */ // end of tof_to_scalar_Q group

  /**
   * \defgroup tof_to_wavelength AxisManip::tof_to_wavelength
   * \{
   */

  /**
   * \brief This function is described in section 3.15.
   *
   * This function converts the time-of-flight to wavelength according
   * to the equation
   * \f[
   * \lambda[i]=\frac{h TOF[i]}{m_n L}
   * \f]
   * Where \f$\lambda[i]\f$ is the wavelength, \f$h\f$ is Planck's
   * constant, \f$TOF[i]\f$ is the time-of-flight, \f$m_n\f$ is the
   * mass of the neutron, and \f$L\f$ is the total flight path of the
   * neutron.
   *
   * Assuming that the uncertainties are uncorrelated, the square of the
   * uncertainty of the wavelength axis is given by
   *
   * \f[
   * \sigma^2_{\lambda}[i]=\left(\frac{h}{m_n L}\right)^2\sigma^2_{TOF}[i]+
   * \left(\frac{\lambda[i]}{L}\right)^2\sigma^2_L
   * \f]
   * where \f$\sigma_{\lambda}\f$ is the uncertainty in the wavelength axis,
   * \f$\sigma_{TOF}\f$ is the uncertainty in the time of flight axis, and
   * \f$\sigma_L\f$ is the uncertainty in the pathlength.
   *
   * \param tof (INPUT) is the time-of-flight axis in units of
   * micro-seconds
   * \param tof_err2 (INPUT) is the square of the uncertainty in the
   * time-of-flight axis
   * \param pathlength (INPUT) is the total flight path of the neutron
   * in units of meter
   * \param pathlength_err2 (INPUT) is the square of the uncertainty
   * in pathlength
   * \param wavelength (OUTPUT) is the wavelength axis in units of
   * Angstroms
   * \param wavelength_err2 (OUTPUT) is the square of the uncertainty
   * in the wavelength axis
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   */
  template <typename NumT>
  std::string
  tof_to_wavelength(Nessi::Vector<NumT> const & tof,
                    Nessi::Vector<NumT> const & tof_err2,
                    const NumT pathlength,
                    const NumT pathlength_err2,
                    Nessi::Vector<NumT> & wavelength,
                    Nessi::Vector<NumT> & wavelength_err2,
                    void *temp=NULL);

  /**
   * \brief This function is described in section 3.15.
   *
   * This function converts the time-of-flight to wavelength according
   * to the equation
   * \f[
   * \lambda=\frac{h TOF}{m_n L}
   * \f]
   * Where \f$\lambda\f$ is the wavelength, \f$h\f$ is Planck's
   * constant, \f$TOF\f$ is the time-of-flight, \f$m_n\f$ is the mass
   * of the neutron, and \f$L\f$ is the total flight path of the
   * neutron.
   *
   * Assuming that the uncertainties are uncorrelated, the square of the
   * uncertainty of the wavelength axis is given by
   *
   * \f[
   * \sigma^2_{\lambda}=\left(\frac{h}{m_n L}\right)^2\sigma^2_{TOF}+
   * \left(\frac{\lambda}{L}\right)^2\sigma^2_L
   * \f]
   * where \f$\sigma_{\lambda}\f$ is the uncertainty in the wavelength axis,
   * \f$\sigma_{TOF}\f$ is the uncertainty in the time of flight axis, and
   * \f$\sigma_L\f$ is the uncertainty in the pathlength.
   *
   * \param tof (INPUT) is the time-of-flight axis in units of
   * micro-seconds
   * \param tof_err2 (INPUT) is the square of the uncertainty in the
   * time-of-flight axis
   * \param pathlength (INPUT) is the total flight path of the neutron
   * in units of meter
   * \param pathlength_err2 (INPUT) is the square of the uncertainty
   * in pathlength
   * \param wavelength (OUTPUT) is the wavelength axis in units of
   * angstrom
   * \param wavelength_err2 (OUTPUT) is the square of the uncertainty
   * in the wavelength axis
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   */
  template <typename NumT>
  std::string
  tof_to_wavelength(const NumT tof,
                    const NumT tof_err2,
                    const NumT pathlength,
                    const NumT pathlength_err2,
                    NumT & wavelength,
                    NumT & wavelength_err2,
                    void *temp=NULL);

  /**
   * \}
   */ // end of tof_to_wavelength group

  /**
   * \defgroup velocity_to_energy AxisManip::velocity_to_energy
   * \{
   */

  /**
   * \brief This function is described in section 3.21.
   *
   * This function calculates the energy of a neutron given its
   * velocity according to the equation
   * \f[
   * E[i]=\frac{1}{2}m_n v[i]^2
         = 5.227\times 10^{-6} \left( \frac{v[i]}{m/\mu s} \right)^2 meV
   * \f]
   * Where \f$E[i]\f$ is the energy of the neutron, \f$m_n\f$ is the
   * mass of the neutron, and \f$v[i]\f$ is the velocity of the
   * netron. The uncertainty is calculated using the assumption of
   * uncorrelated uncertainties.
   *
   * \f[
   * \sigma^2_E[i] = (m_n v[i])^2 \sigma^2_v[i]
   * \f]
   *
   * \param velocity (INPUT) is the velocity of the neutron in units
   * of meter/micro-seconds
   * \param velocity_err2 (INPUT) is the square of the uncertainty in
   * the velocity of the neutron
   * \param energy (OUTPUT) is the energy of the neutron in units of
   * meV
   * \param energy_err2 (OUTPUT) is the square of the uncertainty in
   * the energy
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   */
  template <typename NumT>
  std::string
  velocity_to_energy(Nessi::Vector<NumT> const & velocity,
                     Nessi::Vector<NumT> const & velocity_err2,
                     Nessi::Vector<NumT> & energy,
                     Nessi::Vector<NumT> & energy_err2,
                     void *temp=NULL);

  /**
   * \brief This function is described in section 3.21.
   *
   * This function calculates the energy of a neutron given its
   * velocity according to the equation
   * \f[
   * E=\frac{1}{2}m_n v^2
         = 5.227\times 10^{-6} \left( \frac{v}{m/\mu s} \right)^2 meV
   * \f]
   * Where \f$E\f$ is the energy of the neutron, \f$m_n\f$ is the mass
   * of the neutron, and \f$v\f$ is the velocity of the netron. The
   * uncertainty is calculated using the assumption of uncorrelated
   * uncertainties.
   *
   * \f[
   * \sigma^2_E = (m_n v)^2 \sigma^2_v
   * \f]
   *
   * \param velocity (INPUT) is the velocity of the neutron in units
   * of meter/micro-seconds
   * \param velocity_err2 (INPUT) is the square of the uncertainty in
   * the velocity of the neutron
   * \param energy (OUTPUT) is the energy of the neutron in units of
   * meV
   * \param energy_err2 (OUTPUT) is the square of the uncertainty in
   * the energy
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   */
  template <typename NumT>
  std::string
  velocity_to_energy(const NumT velocity,
                     const NumT velocity_err2,
                     NumT & energy,
                     NumT & energy_err2,
                     void *temp=NULL);

  /**
   * \}
   */ // end of velocity_to_energy group

  /**
   * \defgroup velocity_to_scalar_k AxisManip::velocity_to_scalar_k
   * \{
   */

  /**
   * \brief This function is described in section 3.23.
   *
   * This function calculates the scalar wavevector given the velocity
   * according to the equation
   * \f[
   * k[i]=\frac{m_n}{\hbar}v[i]
   * \f]
   * Where \f$k[i]\f$ is the scalar wavevector, \f$m_n\f$ is the mass
   * of the neutron, \f$\hbar\f$ is Planck's constant divided by \f$2\pi\f$, 
   * and \f$v[i]\f$ is
   * the velocity of the neutron. The uncertainty is calculated using
   * the assumption of uncorrelated uncertainties.
   *
   * \f[
   * \sigma^2_k[i] = \frac{m^2_n \sigma^2_{v}[i]}{\hbar^2}
   * \f]
   *
   * \param velocity (INPUT) is the velocity of the neutron in units
   * of meter/micro-seconds
   * \param velocity_err2 (INPUT) is the square of the uncertainty in
   * the velocity of the neutron
   * \param wavevector (OUTPUT) is the scalar wavevector in units of
   * reciprocal Angstroms
   * \param wavevector_err2 (OUTPUT) is the square of the uncertainty
   * in the scalar wavevector
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   */
  template <typename NumT>
  std::string
  velocity_to_scalar_k(Nessi::Vector<NumT> const & velocity,
                       Nessi::Vector<NumT> const & velocity_err2,
                       Nessi::Vector<NumT> & wavevector,
                       Nessi::Vector<NumT> & wavevector_err2,
                       void *temp=NULL);

  /**
   * \brief This function is described in section 3.23.
   *
   * This function calculates the scalar wavevector given the velocity
   * according to the equation
   * \f[
   * k=\frac{m_n}{\hbar}v
   * \f]
   * Where \f$k\f$ is the scalar wavevector, \f$m_n\f$ is the mass of
   * the neutron, \f$\hbar\f$ is Planck's constant divided by \f$2\pi\f$, 
   * and \f$v\f$ is the
   * velocity of the neutron. The uncertainty is calculated using the
   * assumption of uncorrelated uncertainties.
   *
   * \f[
   * \sigma^2_k = \frac{m^2_n \sigma^2_{v}}{\hbar^2}
   * \f]
   *
   * \param velocity (INPUT) is the velocity of the neutron in units
   * of meter/micro-seconds
   * \param velocity_err2 (INPUT) is the square of the uncertainty in
   * the velocity of the neutron
   * \param wavevector (OUTPUT) is the scalar wavevector in units of
   * reciprocal Angstroms
   * \param wavevector_err2 (OUTPUT) is the square of the uncertainty
   * in the scalar wavevector
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   */
  template <typename NumT>
  std::string
  velocity_to_scalar_k(const NumT velocity,
                       const NumT velocity_err2,
                       NumT & wavevector,
                       NumT & wavevector_err2,
                       void *temp=NULL);

  /**
   * \}
   */ // end of velocity_to_scalar_k group

  /**
   * \defgroup wavelength_to_d_spacing AxisManip::wavelength_to_d_spacing
   * \{
   */

  /**
   * \brief This function is described in section 3.25.
   *
   * This function calculates the d-spacing given the wavelength
   * according to the equation
   * \f[
   * d[i]=\frac{\lambda[i]}{2\sin(polar/2)}
   * \f]
   * Where \f$d\f$ is the d-spacing, \f$\lambda[i]\f$ is the
   * wavelength, and \f$polar\f$ is the angle between the z-axis and
   * the scattered neutron. The uncertainty is calculated using the
   * assumption of uncorrelated uncertainties.
   *
   * \f[
   * \sigma^2_d[i] = \left(\frac{1}{2 \sin(polar/2)}\right)^2 
   * \sigma^2_{\lambda}[i] + \left(\frac{\lambda[i] 
   * \cot(polar/2)}{4 \sin(polar/2)}\right)^2 \sigma^2_{polar}
   * \f]
   *
   * \param wavelength (INPUT) is the wavelength axis in units of
   * angstroms
   * \param wavelength_err2 (INPUT) is the square of the uncertainty
   * in the wavelength axis
   * \param polar (INPUT) is the polar angle in the equation above in
   * units of radians
   * \param polar_err2 (INPUT) is the square of the uncertainty in
   * polar
   * \param d_spacing (OUTPUT) is the d-spacing axis in units of
   * Angstrom
   * \param d_spacing_err2 (OUTPUT) is the square of the uncertainty
   * in the d-spacing axis
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   */
  template <typename NumT>
  std::string
  wavelength_to_d_spacing(Nessi::Vector<NumT> const & wavelength,
                          Nessi::Vector<NumT> const & wavelength_err2,
                          const NumT polar,
                          const NumT polar_err2,
                          Nessi::Vector<NumT> & d_spacing,
                          Nessi::Vector<NumT> & d_spacing_err2,
                          void *temp=NULL);

  /**
   * \brief This function is described in section 3.25.
   *
   * This function calculates the d-spacing given the wavelength
   * according to the equation
   * \f[
   * d=\frac{\lambda}{2\sin(polar/2)}
   * \f]
   * Where \f$d\f$ is the d-spacing, \f$\lambda\f$ is the
   * wavelength, and \f$polar\f$ is the angle between the z-axis and
   * the scattered neutron. The uncertainty is calculated using the
   * assumption of uncorrelated uncertainties.
   *
   * \f[
   * \sigma^2_d = \left(\frac{1}{2 \sin(polar/2)}\right)^2 
   * \sigma^2_{\lambda} + \left(\frac{\lambda 
   * \cot(polar/2)}{4 \sin(polar/2)}\right)^2 \sigma^2_{polar}
   * \f]
   *
   * \param wavelength (INPUT) is the wavelength axis in units of
   * angstroms
   * \param wavelength_err2 (INPUT) is the square of the uncertainty
   * in the wavelength axis
   * \param polar (INPUT) is the polar angle in the equation above in
   * units of radians
   * \param polar_err2 (INPUT) is the square of the uncertainty in
   * polar
   * \param d_spacing (OUTPUT) is the d-spacing axis in units of
   * Angstrom
   * \param d_spacing_err2 (OUTPUT) is the square of the uncertainty
   * in the d-spacing axis
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   */
  template <typename NumT>
  std::string
  wavelength_to_d_spacing(const NumT wavelength,
                          const NumT wavelength_err2,
                          const NumT polar,
                          const NumT polar_err2,
                          NumT & d_spacing,
                          NumT & d_spacing_err2,
                          void *temp=NULL);

  /**
   * \}
   */ // end of wavelength_to_d_spacing group

  /**
   * \defgroup wavelength_to_energy AxisManip::wavelength_to_energy
   * \{
   */

  /**
   * \brief This function is described in section 3.22.
   *
   * This function calculates the energy of a neutron given its
   * wavelength according to the equation
   * \f[
   * E[i]=\frac{h^2}{2 m_n \lambda[i]^2}
   *     =\frac{81.83 Angstrom^2}{\lambda[i]^2} meV
   * \f]
   * Where \f$E\f$ is energy of the neutron, \f$h\f$ is Planck's
   * constant, \f$m_n\f$ is the mass of the neutron, and \f$lambda\f$
   * is the wavelength of the neutron.
   *
   * Assuming that the uncertainties are uncorrelated, the uncertainty
   * in the energy is defined by
   * \f[
   * \sigma^2_E[i]=\left(\frac{2E}{\lambda}\right)^2\sigma^2_{\lambda}[i]
   * \f]
   * where \f$\sigma_E\f$ is the uncertainty in the energy, and
   * \f$\sigma_{\lambda}\f$ is the uncertainty in the wavelength axis.
   *
   * \param wavelength (INPUT) is the wavelength axis in units of
   * Angstroms
   * \param wavelength_err2 (INPUT) is the square of the uncertainty
   * in the wavelength axis
   * \param energy (OUTPUT) is the energy of the neutron in units of
   * meV
   * \param energy_err2 (OUTPUT) is the square of the uncertainty in
   * the energy
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   *
   * \exception std::invalid_argument is thrown if the size of
   * wavelength, wavelength_err2, energy, and energy_err2 are not
   * identical.
   */
  template <typename NumT>
  std::string
  wavelength_to_energy(Nessi::Vector<NumT> const & wavelength,
                       Nessi::Vector<NumT> const & wavelength_err2,
                       Nessi::Vector<NumT> & energy,
                       Nessi::Vector<NumT> & energy_err2,
                       void *temp=NULL);

  /**
   * \brief This function is described in section 3.22.
   *
   * This function calculates the energy of a neutron given its
   * wavelength according to the equation
   * \f[
   * E=\frac{h^2}{2 m_n \lambda^2}
   *     =\frac{81.83 Angstrom^2}{\lambda^2} meV
   * \f]
   * Where \f$E\f$ is energy of the neutron, \f$h\f$ is Planck's
   * constant, \f$m_n\f$ is the mass of the neutron, and \f$lambda\f$
   * is the wavelength of the neutron.
   *
   * Assuming that the uncertainties are uncorrelated, the uncertainty
   * in the energy is defined by
   * \f[
   * \sigma^2_E=\left(\frac{2E}{\lambda}\right)^2\sigma^2_{\lambda}
   * \f]
   * where \f$\sigma_E\f$ is the uncertainty in the energy, and
   * \f$\sigma_{\lambda}\f$ is the uncertainty in the wavelength axis.
   *
   * \param wavelength (INPUT) is the wavelength axis in units of
   * angstroms
   * \param wavelength_err2 (INPUT) is the square of the uncertainty
   * in the wavelength axis
   * \param energy (OUTPUT) is the energy of the neutron in units of
   * meV
   * \param energy_err2 (OUTPUT) is the square of the uncertainty in
   * the energy
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   */
  template <typename NumT>
  std::string
  wavelength_to_energy(const NumT wavelength,
                       const NumT wavelength_err2,
                       NumT & energy,
                       NumT & energy_err2,
                       void *temp=NULL);


  /**
   * \}
   */ // end of wavelength_to_energy group

  /**
   * \defgroup wavelength_to_scalar_k AxisManip::wavelength_to_scalar_k
   * \{
   */

  /**
   * \brief This function is described in section 3.24.
   *
   * This function calculates the scalar wavevector given the
   * wavelength according to the equation
   * \f[
   * k[i]=\frac{2\pi}{\lambda[i]}
   * \f]
   * Where \f$k[i]\f$ is the scalar wavevector, and \f$\lambda\f$ is
   * the wavelength.
   *
   * Assuming that the uncertainties are uncorrelated, the uncertainty
   * in the scalar wavevector is given by
   * \f[
   * \sigma^2_k[i]=\left(\frac{k[i]}{\lambda}\right)^2\sigma^2_{\lambda}[i]
   * \f]
   * where \f$\sigma_k\f$ is the uncertainty in the scalar wavevector, and
   * \f$\sigma_{\lambda}\f$ is the uncertainty in the wavelength axis.
   *
   * \param wavelength (INPUT) is the wavelength axis in units of
   * Angstroms
   * \param wavelength_err2 (INPUT) is the square of the uncertainty
   * in the wavelength axis
   * \param wavevector (OUTPUT) is the scalar wavevector in units of
   * reciprocal Angstroms
   * \param wavevector_err2 (OUTPUT) is the square of the uncertainty
   * in the scalar wavevector
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   *
   * \exception std::invalid_argument is thrown if the size of
   * wavelength, wavelength_err2, wavevector, and wavevector_err2 are
   * not identical.
   */
  template <typename NumT>
  std::string
  wavelength_to_scalar_k(Nessi::Vector<NumT> const & wavelength,
                         Nessi::Vector<NumT> const & wavelength_err2,
                         Nessi::Vector<NumT> & wavevector,
                         Nessi::Vector<NumT> & wavevector_err2,
                         void *temp=NULL);

  /**
   * \brief This function is described in section 3.24.
   *
   * This function calculates the scalar wavevector given the
   * wavelength according to the equation
   * \f[
   * k=\frac{2\pi}{\lambda}
   * \f]
   * Where \f$k\f$ is the scalar wavevector, and \f$\lambda\f$ is
   * the wavelength.
   *
   * Assuming that the uncertainties are uncorrelated, the uncertainty
   * in the scalar wavevector is given by
   * \f[
   * \sigma^2_k=\left(\frac{k}{\lambda}\right)^2\sigma^2_{\lambda}
   * \f]
   * where \f$\sigma_k\f$ is the uncertainty in the scalar wavevector, and
   * \f$\sigma_{\lambda}\f$ is the uncertainty in the wavelength axis.
   *
   * \param wavelength (INPUT) is the wavelength axis in units of
   * Angstroms
   * \param wavelength_err2 (INPUT) is the square of the uncertainty
   * in the wavelength axis
   * \param wavevector (OUTPUT) is the scalar wavevector in units of
   * reciprocal Angstroms
   * \param wavevector_err2 (OUTPUT) is the square of the uncertainty
   * in the scalar wavevector
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   */
  template <typename NumT>
  std::string
  wavelength_to_scalar_k(const NumT wavelength,
                         const NumT wavelength_err2,
                         NumT & wavevector,
                         NumT & wavevector_err2,
                         void *temp=NULL);

  /**
   * \}
   */ // end of wavelength_to_scalar_k group

  /**
   * \defgroup wavelength_to_scalar_Q AxisManip::wavelength_to_scalar_Q
   * \{
   */

  /**
   * \brief This function is described in section 3.18.
   *
   * This function converts the wavelength to scalar momentum transfer
   * according to the equation
   * \f[
   * Q[i]=\frac{4\pi}{\lambda[i]}\sin(polar)
   * \f]
   * Where \f$Q[i]\f$ is the scalar momentum transfer, \f$\lambda[i]\f$
   * is the wavelength, and \f$polar\f$ is the angle between the
   * positive z-axis and the direction of the scattered neutron.
   *
   * Using the assumption of uncorrelated uncertainties, the square of the
   * uncertainty of the scalar momentum transfer is given by
   * \f[
   * \sigma^2_Q[i]=\left(\frac{4\pi}{\lambda[i]}\right)^2
   * \left(cos(polar)^2\sigma_{polar}^2+\left(\frac{sin(polar)}
   * {\lambda[i]}\right)^2\sigma^2_\lambda[i]\right)
   * \f]
   *
   * \param wavelength (INPUT) is the wavelength axis in units of
   * angstroms
   * \param wavelength_err2 (INPUT) is the square of the uncertainty in the
   * wavelength axis
   * \param polar (INPUT) is the polar angle in the equation above in
   * units of radians
   * \param polar_err2 (INPUT) is the square of the uncertainty in
   * polar
   * \param Q (OUTPUT) is the scalar momentum transfer, Q, axis in
   * units of reciprocal angstroms
   * \param Q_err2 (OUTPUT) is the square of the uncertainty in the
   * scalar momentum transfer axis
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   */
  template <typename NumT>
  std::string
  wavelength_to_scalar_Q(Nessi::Vector<NumT> const & wavelength,
                         Nessi::Vector<NumT> const & wavelength_err2,
                         const NumT polar,
                         const NumT polar_err2,
                         Nessi::Vector<NumT> & Q,
                         Nessi::Vector<NumT> & Q_err2,
                         void *temp=NULL);

  /**
   * \brief This function is described in section 3.18.
   *
   * This function converts the wavelength to scalar momentum transfer
   * according to the equation
   * \f[
   * Q=\frac{4\pi}{\lambda}\sin(polar)
   * \f]
   * Where \f$Q\f$ is the scalar momentum transfer, \f$\lambda\f$
   * is the wavelength, and \f$polar\f$ is the angle between the
   * positive z-axis and the direction of the scattered neutron. The
   * uncertainty is calculated using the assumption of uncorrelated
   * uncertainties.
   *
   * Using the assumption of uncorrelated uncertainties, the square of the
   * uncertainty of the scalar momentum transfer is given by
   * \f[
   * \sigma^2_Q=\left(\frac{4\pi}{\lambda}\right)^2
   * \left(cos(polar)^2\sigma_{polar}^2+\left(\frac{sin(polar)}
   * {\lambda}\right)^2\sigma^2_\lambda\right)
   * \f]
   *
   * \param wavelength (INPUT) is the wavelength axis in units of
   * angstroms
   * \param wavelength_err2 (INPUT) is the square of the uncertainty in the
   * wavelength axis
   * \param polar (INPUT) is the polar angle in the equation above in
   * units of radians
   * \param polar_err2 (INPUT) is the square of the uncertainty in
   * polar
   * \param Q (OUTPUT) is the scalar momentum transfer, Q, axis in
   * units of reciprocal angstroms
   * \param Q_err2 (OUTPUT) is the square of the uncertainty in the
   * scalar momentum transfer axis
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   */
  template <typename NumT>
  std::string
  wavelength_to_scalar_Q(const NumT wavelength,
                         const NumT wavelength_err2,
                         const NumT polar,
                         const NumT polar_err2,
                         NumT & Q,
                         NumT & Q_err2,
                         void *temp=NULL);

  /**
   * \}
   */ // end of wavelength_to_scalar_Q group

  /**
   * \defgroup wavelength_to_tof AxisManip::wavelength_to_tof
   * \{
   */

  /**
   * \brief This function is described in section 3.16.
   *
   * This function converts the wavelength to time-of-flight according
   * to the equation
   * \f[
   * TOF[i]=\frac{m_n L \lambda[i]}{h}
   * \f]
   * Where \f$TOF[i]\f$ is the time-of-flight, \f$m_n\f$ is the mass
   * of the neutron, \f$L\f$ is the total flight path of the neutron,
   * \f$\lambda\f$ is the wavelength, and \f$h\f$ is Planck's
   * constant. The uncertainty is calculated using the assumption of
   * uncorrelated uncertainties.
   *
   * \param wavelength (INPUT) is the wavelength axis in units of
   * angstroms
   * \param wavelength_err2 (INPUT) is the square of the uncertainty
   * in the wavelength axis
   * \param pathlength (INPUT) is the total flight path of the neutron
   * in units of meter
   * \param pathlength_err2 (INPUT) is the square of the uncertainty
   * in pathlength
   * \param tof (OUTPUT) is the time-of-flight axis in units of
   * micro-seconds
   * \param tof_err2 (OUTPUT) is the square of the uncertainty in the
   * time-of-flight axis
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   */
  template <typename NumT>
  std::string
  wavelength_to_tof(Nessi::Vector<NumT> const & wavelength,
                    Nessi::Vector<NumT> const & wavelength_err2,
                    const NumT pathlength,
                    const NumT pathlength_err2,
                    Nessi::Vector<NumT> & tof,
                    Nessi::Vector<NumT> & tof_err2,
                    void *temp=NULL);

  /**
   * \brief This function is described in section 3.16.
   *
   * This function converts the wavelength to time-of-flight according
   * to the equation
   * \f[
   * TOF=\frac{m_n L \lambda}{h}
   * \f]
   * Where \f$TOF\f$ is the time-of-flight, \f$m_n\f$ is the mass
   * of the neutron, \f$L\f$ is the total flight path of the neutron,
   * \f$\lambda\f$ is the wavelength, and \f$h\f$ is Planck's
   * constant. The uncertainty is calculated using the assumption of
   * uncorrelated uncertainties.
   *
   * \param wavelength (INPUT) is the wavelength axis in units of
   * angstroms
   * \param wavelength_err2 (INPUT) is the square of the uncertainty
   * in the wavelength axis
   * \param pathlength (INPUT) is the total flight path of the neutron
   * in units of meter
   * \param pathlength_err2 (INPUT) is the square of the uncertainty
   * in pathlength
   * \param tof (OUTPUT) is the time-of-flight axis in units of
   * micro-seconds
   * \param tof_err2 (OUTPUT) is the square of the uncertainty in the
   * time-of-flight axis
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   */
  template <typename NumT>
  std::string
  wavelength_to_tof(const NumT wavelength,
                    const NumT wavelength_err2,
                    const NumT pathlength,
                    const NumT pathlength_err2,
                    NumT & tof,
                    NumT & tof_err2,
                    void *temp=NULL);

  /**
   * \}
   */ // end of wavelength_to_tof group

} // AxisManip

#endif // _CONVERSIONS_HPP
