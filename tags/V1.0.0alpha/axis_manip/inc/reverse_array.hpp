/**
 * $Id$
 *
 * \file axis_manip/inc/reverse_array.hpp
 */
#ifndef _REVERSE_ARRAY_HPP
#define _REVERSE_ARRAY_HPP 1

#include "nessi.hpp"
#include <string>

namespace AxisManip
{
  /**
   * \defgroup reverse_array_cp AxisManip::reverse_array_cp
   * \{
   */

  /**
   * \brief This function is described in section 3.11.
   *
   * This function will reorder an array so the last element of the
   * supplied array is the first element of the result array.
   *
   * \param input (INPUT) is the array to be reversed
   * \param output (OUTPUT) is the reversed array
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   */
  template <typename NumT>
    std::string 
    reverse_array_cp(const Nessi::Vector<NumT> & input,
                     Nessi::Vector<NumT> & output,
                     void *temp=NULL);

  /**
   * \}
   */ // end of reverse_array_cp group

  /**
   * \defgroup reverse_array_nc AxisManip::reverse_array_nc
   * \{
   */

  /**
   * \brief This function is not described but is based on section 3.11.
   *  
   * This function will reorder an array so the last element of the
   * supplied array is the first element of the supplied array. This array 
   * reversal is done in place on the supplied array (i.e. no copy).
   *
   * \param inout (INPUT/OUTPUT) is the array to be reversed. It also is the 
   * place holder for the reversed array.
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   */
  template <typename NumT>
    std::string 
    reverse_array_nc(Nessi::Vector<NumT> & inout,
		     void *temp=NULL);
  
  /**
   * \}
   */ // end of reverse_array_nc group

} // AxisManip

#endif // _REVERSE_ARRAY_HPP
