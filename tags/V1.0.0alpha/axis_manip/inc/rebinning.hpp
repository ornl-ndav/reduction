/**
 * $Id$
 *
 * \file axis_manip/inc/rebinning.hpp
 */
#ifndef _REBINNING_HPP
#define _REBINNING_HPP 1

#include "nessi.hpp"
#include <string>

namespace AxisManip
{
  /**
   * \defgroup rebin_axis_1D AxisManip::rebin_axis_1D
   * \{
   */

  /**
   * \brief This function is described in section 3.12.
   *
   * This function rebins data and its associated errors from one axis to 
   * another given axis. This function uses fractional overlap of bins to 
   * perform the rebinning process. The function also assumes that the data 
   * is represented by a histogram model.
   *   
   * This function was provided by Paul Kienzle (NIST) and is based on an 
   * OpenGenie routine.
   *   
   * \param axis_in (INPUT) is the initial data axis
   * \param input (INPUT) is the data associated with the initial axis
   * \param input_err2 (INPUT) is the square of the uncertainty associated 
   * with the data
   * \param axis_out (INPUT) is the target axis for rebinning
   * \param output (OUTPUT) is the rebinned data according to the target axis
   * \param output_err2 (OUTPUT) is the square of the uncertainty associated 
   * with the rebinned data
   *
   * \param temp holds temporary memory to be passed to the function
   *
   * \return A set of warnings generated by the function
   */
  template <typename NumT>
    std::string 
    rebin_axis_1D(const Nessi::Vector<NumT> & axis_in,
		  const Nessi::Vector<NumT> & input,
		  const Nessi::Vector<NumT> & input_err2,
		  const Nessi::Vector<NumT> & axis_out,
		  Nessi::Vector<NumT> & output,
		  Nessi::Vector<NumT> & output_err2,
		  void *temp=NULL);

  /**
   * \}
   */ // end of rebin_axis_1D group
  
  /**
   * \defgroup rebin_axis_2D AxisManip::rebin_axis_2D
   * \{
   */

  /**
   * \brief This function is described in section 3.13.
   */
  template <typename NumT>
    std::string 
    rebin_axis_2D(const Nessi::Vector<NumT> & axis_in_1,
		  const Nessi::Vector<NumT> & axis_in_2,
		  const Nessi::Vector<NumT> & input,
		  const Nessi::Vector<NumT> & input_err2,
		  const Nessi::Vector<NumT> & axis_out_1,
		  const Nessi::Vector<NumT> & axis_out_2,
		  Nessi::Vector<NumT> & output,
		  Nessi::Vector<NumT> & output_err2,
		  void *temp=NULL);

  /**
   * \}
   */ // end of rebin_axis_2D group

  /**
   * \defgroup rebin_axis_4D AxisManip::rebin_axis_4D
   * \{
   */

  /**
   * \brief This function is described in section 3.14.
   */
  template <typename NumT>
    std::string 
    rebin_axis_4D(const Nessi::Vector<NumT> & axis_in_1,
		  const Nessi::Vector<NumT> & axis_in_2,
		  const Nessi::Vector<NumT> & axis_in_3,
		  const Nessi::Vector<NumT> & axis_in_4,
		  const Nessi::Vector<NumT> & input,
		  const Nessi::Vector<NumT> & input_err2,
		  const Nessi::Vector<NumT> & axis_out_1,
		  const Nessi::Vector<NumT> & axis_out_2,
		  const Nessi::Vector<NumT> & axis_out_3,
		  const Nessi::Vector<NumT> & axis_out_4,
		  Nessi::Vector<NumT> & output,
		  Nessi::Vector<NumT> & output_err2,
		  void *temp=NULL);

  /**
   * \}
   */ // end of rebin_axis_4D group

} // AxisManip

#endif // _REBINNING_HPP
